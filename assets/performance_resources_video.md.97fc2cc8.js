import{_ as e,c as a,o as s,a as r}from"./app.89d965e1.js";const u=JSON.parse('{"title":"视频","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 使用合适的视频格式","slug":"_1-使用合适的视频格式","link":"#_1-使用合适的视频格式","children":[]},{"level":2,"title":"2. 视频压缩","slug":"_2-视频压缩","link":"#_2-视频压缩","children":[]},{"level":2,"title":"3. 移除不必要的音轨信息","slug":"_3-移除不必要的音轨信息","link":"#_3-移除不必要的音轨信息","children":[]},{"level":2,"title":"4. 使用“流”","slug":"_4-使用-流","link":"#_4-使用-流","children":[]},{"level":2,"title":"5. 移除不必要的视频","slug":"_5-移除不必要的视频","link":"#_5-移除不必要的视频","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"performance/resources/video.md"}'),n={name:"performance/resources/video.md"},l=r(`<h1 id="视频" tabindex="-1">视频 <a class="header-anchor" href="#视频" aria-hidden="true">#</a></h1><p>视频作为一种重要的媒体形态，在网站中使用可以提高网站内容的丰富性，但同时对网络加载来说也是一个负担。所以会出现一些如下针对 Web 上视频的优化。</p><h2 id="_1-使用合适的视频格式" tabindex="-1">1. 使用合适的视频格式 <a class="header-anchor" href="#_1-使用合适的视频格式" aria-hidden="true">#</a></h2><p>与图片类似，不同的视频编码格式，其数据大小也大都不同。目前在 HTML5 Video 中常用的格式为 MPEG-4。除了 MPEG-4 之外，还支持一种叫 WebM 的新的视频格式。</p><p>WebM(VP9) 相较于 MPEG-4(x264) 来说会更小，不过<a href="https://caniuse.com/#feat=webm" target="_blank" rel="noreferrer">兼容性相对来说也较差</a>。因此可以考虑在 <code>&lt;video&gt;</code> 中指定多个 <code>&lt;source&gt;</code>。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">video</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">source</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/static/video/me.webm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">video/webm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">source</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/static/video/me.mp4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">video/mp4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">video</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此外，使用 <a href="https://www.youtube.com/watch?v=04lXWMcwdXA" target="_blank" rel="noreferrer">AV1 编码</a><sup>[1]</sup>会比 <a href="https://youtu.be/reztLS3vomE?t=356" target="_blank" rel="noreferrer">VP9(WebM) 小约 30%，比 x264(MPEG-4) 小约 45-50%</a><sup>[2]</sup>。</p><h2 id="_2-视频压缩" tabindex="-1">2. 视频压缩 <a class="header-anchor" href="#_2-视频压缩" aria-hidden="true">#</a></h2><p>对于视频，我们也可以进行有损与无损压缩，同样可以有效减少视频大小。下面列举了一些常用的工具：</p><ul><li><a href="https://handbrake.fr/" target="_blank" rel="noreferrer">HandBrake</a></li><li><a href="https://www.freemake.com/free_video_converter/" target="_blank" rel="noreferrer">Freemake</a></li><li><a href="http://www.selur.de/" target="_blank" rel="noreferrer">Hybrid</a></li><li><a href="https://sourceforge.net/projects/megui/" target="_blank" rel="noreferrer">MeGUI</a></li></ul><h2 id="_3-移除不必要的音轨信息" tabindex="-1">3. 移除不必要的音轨信息 <a class="header-anchor" href="#_3-移除不必要的音轨信息" aria-hidden="true">#</a></h2><p>在上一节中我们提到，可以使用 <code>&lt;video&gt;</code> 代替 GIF 来实现动画，同时体积也会更小。由于在这种场景下本身就是不需要声音的，所以我们会将 <code>&lt;video&gt;</code> 设置为 <code>muted</code>。</p><p>那么，既然不需要声音，我们是不是可以直接移除掉音轨的数据？是的，这样做也会帮助进一步缩减视频的体积。</p><h2 id="_4-使用-流" tabindex="-1">4. 使用“流” <a class="header-anchor" href="#_4-使用-流" aria-hidden="true">#</a></h2><p>尝试让浏览器使用“流”或者小分片的方式来播放你的视频，例如常用的 HLS (HTTP Live Streaming) 技术。简单来说，使用 HLS 技术，你的视频会包含一个 <code>.m3u8</code> 的索引文件和一系列包含播放内容的 <code>.ts</code> 分片。浏览器通过不断下载一小段的分片来进行视频播放，避免了完整视频下载的流量消耗。</p><p>你也可以尝试使用 <a href="https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP" target="_blank" rel="noreferrer">MPEG-DASH</a><sup>[3]</sup> 这个技术，目前开源社区也有一个配套的<a href="https://github.com/Dash-Industry-Forum/dash.js" target="_blank" rel="noreferrer">客户端实现</a>。</p><h2 id="_5-移除不必要的视频" tabindex="-1">5. 移除不必要的视频 <a class="header-anchor" href="#_5-移除不必要的视频" aria-hidden="true">#</a></h2><p>对于不需要使用视频的场景，最好的优化方法就是去掉视频。例如在小屏幕上，你可以通过媒体查询来避免下载视频：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@media</span><span style="color:#A6ACCD;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">650px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">#</span><span style="color:#F78C6C;">hero-video</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><p>关于视频的优化这里只介绍了一些基本的手段，但对于一个重度的视频网站来说，会包含例如播放器 SDK 的优化、数据预取、码率自适应等更多的优化内容，在 2019 GMTC 上，<a href="https://github.com/alienzhou/fe-performance-journey/raw/master/assets/2019GMTC_B%E7%AB%99%E7%9A%84%E8%A7%86%E9%A2%91%E4%BD%93%E9%AA%8C%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF.pdf" target="_blank" rel="noreferrer">B 站分享了他们的缩减首帧耗时的一系列优化措施</a><sup>[4]</sup>。</p><p>此外，虽然上面介绍了一些视频处理的软件工具，但是如果有更高的定制化或集成需求，建议使用 <a href="https://www.ffmpeg.org/" target="_blank" rel="noreferrer">FFmpeg</a><sup>[5]</sup> 或<a href="https://github.com/FFmpeg/FFmpeg#libraries" target="_blank" rel="noreferrer">相关的库</a>来处理。</p><hr><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ol><li><a href="https://www.youtube.com/watch?v=04lXWMcwdXA" target="_blank" rel="noreferrer">a technial overview of the AV1</a></li><li><a href="https://youtu.be/reztLS3vomE?t=356" target="_blank" rel="noreferrer">Speed Essentials: Key Techniques for Fast Websites (Chrome Dev Summit 2018)</a></li><li><a href="https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP" target="_blank" rel="noreferrer">Dynamic Adaptive Streaming over HTTP (Wikipedia)</a></li><li><a href="https://github.com/alienzhou/fe-performance-journey/raw/master/assets/2019GMTC_B%E7%AB%99%E7%9A%84%E8%A7%86%E9%A2%91%E4%BD%93%E9%AA%8C%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF.pdf" target="_blank" rel="noreferrer">B 站的视频体验进化之路</a></li><li><a href="https://www.ffmpeg.org/" target="_blank" rel="noreferrer">FFmepg</a></li><li><a href="https://www.keycdn.com/blog/video-optimization" target="_blank" rel="noreferrer">8 Video Optimization Tips for Faster Loading Times</a></li><li><a href="https://rigor.com/blog/optimizing-mp4-video-for-fast-streaming" target="_blank" rel="noreferrer">Optimizing MP4 Video for Fast Streaming</a></li><li><a href="https://blog.catchpoint.com/2017/06/16/web-performance-101-video-optimization/" target="_blank" rel="noreferrer">Web Performance 101: Video Optimization</a></li></ol>`,25),o=[l];function t(p,i,c,d,h,D){return s(),a("div",null,o)}const m=e(n,[["render",t]]);export{u as __pageData,m as default};
