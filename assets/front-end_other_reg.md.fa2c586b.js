import{_ as l,c as e,b as t,d as s,e as p,w as o,a,r,o as c}from"./app.941c4894.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"1 正则表达式 是什么","slug":"_1-正则表达式-是什么","link":"#_1-正则表达式-是什么","children":[]},{"level":2,"title":"2 正则表达式 怎样创建","slug":"_2-正则表达式-怎样创建","link":"#_2-正则表达式-怎样创建","children":[{"level":3,"title":"对比：字面量方式更简洁效率更高 但是无法拼接变量","slug":"对比-字面量方式更简洁效率更高-但是无法拼接变量","link":"#对比-字面量方式更简洁效率更高-但是无法拼接变量","children":[]}]},{"level":2,"title":"3 正则表达式语法","slug":"_3-正则表达式语法","link":"#_3-正则表达式语法","children":[{"level":3,"title":"3.1 字符集合与范围类[ ]","slug":"_3-1-字符集合与范围类","link":"#_3-1-字符集合与范围类","children":[]},{"level":3,"title":"3.2 预定义元字符类","slug":"_3-2-预定义元字符类","link":"#_3-2-预定义元字符类","children":[]},{"level":3,"title":"3.3 边界类","slug":"_3-3-边界类","link":"#_3-3-边界类","children":[]},{"level":3,"title":"3.4 量词类","slug":"_3-4-量词类","link":"#_3-4-量词类","children":[]},{"level":3,"title":"3.5 特殊符号类","slug":"_3-5-特殊符号类","link":"#_3-5-特殊符号类","children":[]},{"level":3,"title":"3.6 捕获分组与非捕获分组（ ）","slug":"_3-6-捕获分组与非捕获分组","link":"#_3-6-捕获分组与非捕获分组","children":[]},{"level":3,"title":"3.7 贪婪与非贪婪模式","slug":"_3-7-贪婪与非贪婪模式","link":"#_3-7-贪婪与非贪婪模式","children":[]},{"level":3,"title":"3.8 正向肯定查找和正向否定查找","slug":"_3-8-正向肯定查找和正向否定查找","link":"#_3-8-正向肯定查找和正向否定查找","children":[]}]},{"level":2,"title":"4 正则实例属性","slug":"_4-正则实例属性","link":"#_4-正则实例属性","children":[]},{"level":2,"title":"5 正则实例方法","slug":"_5-正则实例方法","link":"#_5-正则实例方法","children":[{"level":3,"title":"5.1 test","slug":"_5-1-test","link":"#_5-1-test","children":[]},{"level":3,"title":"5.2 exec","slug":"_5-2-exec","link":"#_5-2-exec","children":[]}]},{"level":2,"title":"6 字符串实例方法","slug":"_6-字符串实例方法","link":"#_6-字符串实例方法","children":[{"level":3,"title":"6.1 search","slug":"_6-1-search","link":"#_6-1-search","children":[]},{"level":3,"title":"6.2 split","slug":"_6-2-split","link":"#_6-2-split","children":[]},{"level":3,"title":"6.3 match","slug":"_6-3-match","link":"#_6-3-match","children":[]},{"level":3,"title":"6.4 replace","slug":"_6-4-replace","link":"#_6-4-replace","children":[]}]}],"relativePath":"front-end/other/reg.md"}'),i={name:"front-end/other/reg.md"},y=a(`<h2 id="_1-正则表达式-是什么" tabindex="-1">1 正则表达式 是什么 <a class="header-anchor" href="#_1-正则表达式-是什么" aria-hidden="true">#</a></h2><p>答：正则表达式就是处理字符串的</p><p>如何处理呢？</p><p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个字符串是否含有某种子串、将匹配的子串做替换或者从某个字符串中取出符合某个条件的子串等。</p><blockquote><p>记住两个关键作用：1.搜索字符串 2.替换字符串</p></blockquote><h2 id="_2-正则表达式-怎样创建" tabindex="-1">2 正则表达式 怎样创建 <a class="header-anchor" href="#_2-正则表达式-怎样创建" aria-hidden="true">#</a></h2><ul><li>方法一：字面量方式</li></ul><p>语法格式为: /正则表达式主体/修饰符(可选)</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">gi</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>方法二：构造函数</li></ul><p>语法格式为:new RegExp(正则表达式主体[, 修饰符])</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gi</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="对比-字面量方式更简洁效率更高-但是无法拼接变量" tabindex="-1">对比：字面量方式更简洁效率更高 但是无法拼接变量 <a class="header-anchor" href="#对比-字面量方式更简洁效率更高-但是无法拼接变量" aria-hidden="true">#</a></h3><p>常用<strong>修饰符</strong>如下</p><table><thead><tr><th style="text-align:center;">修饰符</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">i</td><td style="text-align:center;">忽略大小写匹配</td></tr><tr><td style="text-align:center;">g</td><td style="text-align:center;">全局匹配，即是匹配一个后继续匹配，直到结束</td></tr><tr><td style="text-align:center;">m</td><td style="text-align:center;">多行匹配，即是遇到换行后不停止匹配，直到结束</td></tr><tr><td style="text-align:center;">s</td><td style="text-align:center;">特殊字符圆点 . 中包含换行符 \\n</td></tr></tbody></table><h2 id="_3-正则表达式语法" tabindex="-1">3 正则表达式语法 <a class="header-anchor" href="#_3-正则表达式语法" aria-hidden="true">#</a></h2><h3 id="_3-1-字符集合与范围类" tabindex="-1">3.1 字符集合与范围类[ ] <a class="header-anchor" href="#_3-1-字符集合与范围类" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">表达式</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">[abc]</td><td style="text-align:center;">匹配方括号内的任意字符</td></tr><tr><td style="text-align:center;">[^abc]</td><td style="text-align:center;">匹配不在方括号内的任意字符</td></tr><tr><td style="text-align:center;">[0-9]</td><td style="text-align:center;">匹配任何从 0 至 9 的字符</td></tr><tr><td style="text-align:center;">[a-z]</td><td style="text-align:center;">匹配任何从小写 a 至 z 的字符</td></tr><tr><td style="text-align:center;">[A-Z]</td><td style="text-align:center;">匹配任何从大写 A 至 Z 的字符</td></tr></tbody></table><blockquote><p>字符集合和范围类都是使用中括号[]定义的 区别：范围类在中括号[]里面是用短横线-连接（左边的要小于右边的 不然会报错）</p></blockquote><h3 id="_3-2-预定义元字符类" tabindex="-1">3.2 预定义元字符类 <a class="header-anchor" href="#_3-2-预定义元字符类" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td style="text-align:center;">匹配任意单个字符，除换行和结束符</td></tr><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">匹配数字，等价于 [0-9]</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">匹配非数字，等价于 [^0-9]</td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">匹配空白字符 主要有(\\n、\\f、\\r、\\t、\\v)</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">匹配非空白字符</td></tr><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">匹配任意单词字符（数字、字母、下划线），等价于[A-Za-z0-9_]</td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">匹配任意非单词字符，与\\w 相反，等价于[^a-za-z0-9_]</td></tr></tbody></table><h3 id="_3-3-边界类" tabindex="-1">3.3 边界类 <a class="header-anchor" href="#_3-3-边界类" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:center;">说明</th><th style="text-align:center;">举例</th></tr></thead><tbody><tr><td style="text-align:center;">^</td><td style="text-align:center;">匹配字符串的开始</td><td style="text-align:center;">/^a/匹配&quot;an A&quot;，而不匹配&quot;An a&quot;</td></tr><tr><td style="text-align:center;">$</td><td style="text-align:center;">匹配字符串的结束</td><td style="text-align:center;">/a$/匹配&quot;An a&quot;，而不匹配&quot;an A&quot;</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:center;">匹配单词的开始或结束</td><td style="text-align:center;">/\\bno/ 匹配 &quot;at noon&quot; 中的 &quot;no&quot;</td></tr></tbody></table><h3 id="_3-4-量词类" tabindex="-1">3.4 量词类 <a class="header-anchor" href="#_3-4-量词类" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">*</td><td style="text-align:center;">重复零次或更多次</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">重复一次或更多次（至少有一次）</td></tr><tr><td style="text-align:center;">?</td><td style="text-align:center;">重复零次或一次（可有可无）</td></tr><tr><td style="text-align:center;"><code>{n}</code></td><td style="text-align:center;">重复 n 次</td></tr><tr><td style="text-align:center;"><code>{n,m}</code></td><td style="text-align:center;">至少 n 次最多 m 次</td></tr><tr><td style="text-align:center;"><code>{n,}</code></td><td style="text-align:center;">至少 n 次</td></tr></tbody></table><h3 id="_3-5-特殊符号类" tabindex="-1">3.5 特殊符号类 <a class="header-anchor" href="#_3-5-特殊符号类" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:center;">说明</th><th style="text-align:center;">举例</th></tr></thead><tbody><tr><td style="text-align:center;">/</td><td style="text-align:center;">字面量方式声明正则时的界定符</td><td style="text-align:center;">/xxx/</td></tr><tr><td style="text-align:center;">\\</td><td style="text-align:center;">对正则表达式功能字符的还原</td><td style="text-align:center;">?匹配它前面元字符 0 次或 1 次，/ba?/将匹配 b,ba，加了\\后，/ba\\?/将只匹配 ba?</td></tr><tr><td style="text-align:center;">|</td><td style="text-align:center;">a|b 匹配包含 a 或 b 的字符串</td><td style="text-align:center;">/ab | ba/将匹配 ab,ba</td></tr></tbody></table><h3 id="_3-6-捕获分组与非捕获分组" tabindex="-1">3.6 捕获分组与非捕获分组（ ） <a class="header-anchor" href="#_3-6-捕获分组与非捕获分组" aria-hidden="true">#</a></h3><ul><li>捕获分组（x） 匹配 x 并且捕获匹配项</li></ul><p>例如：/(foo)/ 匹配且捕获 &quot;foo bar&quot; 中的 &quot;foo&quot;。被匹配的子字符串可以通过 元素[n] 中找到，或 RegExp 对象的属性 $n 中找到</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">\\s</span><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">// [&quot;foo bar&quot;, &quot;foo&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>非捕获分组(?:x) 匹配 x 不会捕获匹配项。匹配项不能够从结果再次访问</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/(?:</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">\\s</span><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">// [&quot;foo bar&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>上面的例子看上去非捕获分组貌似没什么用 其实它的用处很大 我们看看下面的例子</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">希望匹配字母，且字母之间可以为 </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> 或 </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> 时，但最终结果不需要中间的数字 只需要两边的字母</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abcd1j452h</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">]+(</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">)+([</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">]+)/</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abcd1j</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">j</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;">//不使用非捕获分组 会把中间数字 1 也放入结果</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abcd1j452h</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">]+(?:</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">)+([</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">]+)/</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abcd1j</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">j</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;">//这样才完成需求</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-7-贪婪与非贪婪模式" tabindex="-1">3.7 贪婪与非贪婪模式 <a class="header-anchor" href="#_3-7-贪婪与非贪婪模式" aria-hidden="true">#</a></h3><p>默认使用贪婪模式 尽可能多的匹配</p><p>在重复量词后面加一个?，代表使用非贪婪模式，尽可能短的匹配</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1234567</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2,5}/</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">12345</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;">//默认贪婪模式（尽可能匹配多）</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1234567</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2,5}?/</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;">//转成非贪婪模式</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-8-正向肯定查找和正向否定查找" tabindex="-1">3.8 正向肯定查找和正向否定查找 <a class="header-anchor" href="#_3-8-正向肯定查找和正向否定查找" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">x(?=y)</td><td style="text-align:center;">只有当 x 后面紧跟着 y 时，才匹配 x。</td></tr><tr><td style="text-align:center;">x(?!y)</td><td style="text-align:center;">只有当 x 后面不是紧跟着 y 时，才匹配 x。</td></tr></tbody></table><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bg.png index.html app.js index.css test.png</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;">//从以上字符串中找出以 png 结尾的文件名</span></span>
<span class="line"><span style="color:#676E95;">//不使用正向肯定查找的做法</span></span>
<span class="line"><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">\\b</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\w</span><span style="color:#89DDFF;">+)</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">png</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">//[&quot;bg.png&quot;, &quot;test.png&quot;] 我们只想要文件名 不想要.png 后缀</span></span>
<span class="line"><span style="color:#A6ACCD;">使用正向肯定查找</span></span>
<span class="line"><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">\\b</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\w</span><span style="color:#89DDFF;">+)(?=</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">png</span><span style="color:#89DDFF;">)/</span><span style="color:#F78C6C;">g</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">// [&quot;bg&quot;, &quot;test&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>注意：x(?=y)需要和非捕获分组(?:)区分开（写法很类似） 其次 x(?=y)最终匹配结果只有 x 没有 y</p></blockquote><h2 id="_4-正则实例属性" tabindex="-1">4 正则实例属性 <a class="header-anchor" href="#_4-正则实例属性" aria-hidden="true">#</a></h2><p>RegExp.prototype.global 是否开启全局匹配</p><p>RegExp.prototype.ignoreCase 是否要忽略字符的大小写</p><p>RegExp.prototype.lastIndex 下次匹配开始的字符串索引位置</p><p>RegExp.prototype.multiline 是否开启多行模式匹配（影响 ^ 和 $ 的行为）</p><p>RegExp.prototype.source 正则对象的源模式文本</p><p>RegExp.prototype.sticky 是否开启粘滞匹配</p><h2 id="_5-正则实例方法" tabindex="-1">5 正则实例方法 <a class="header-anchor" href="#_5-正则实例方法" aria-hidden="true">#</a></h2><h3 id="_5-1-test" tabindex="-1">5.1 test <a class="header-anchor" href="#_5-1-test" aria-hidden="true">#</a></h3><ul><li><p>语法：regObj.test(str) 对字符串执行搜索</p></li><li><p>返回值：布尔值。测试 str 中是否存在匹配 regObj 模式的字符串，存在返回 true，不存在返回 false</p></li></ul><blockquote><p>用法很简单 但是有坑点 该方法在正则对象是否带有全局属性（g）下的表现不同</p></blockquote><p>先介绍下正则对象的 lastIndex 属性，lastIndex 是正则表达式匹配内容时，开始匹配的位置。</p><p><strong>不带全局属性 g</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12a12sf12g1234</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+[</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">]+/</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastIndex </span><span style="color:#676E95;">// 0</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(str) </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastIndex </span><span style="color:#676E95;">// 0</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(str) </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastIndex </span><span style="color:#676E95;">// 0</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(str) </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastIndex </span><span style="color:#676E95;">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>由上可见：刚开始都是从下标 0 处开始匹配，不带 g 时，无论执行多少次，该正则对像的 lastIndex 属性均不变</p><p><strong>带全局属性 g</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12a12sf12g1234</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+[</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">]+/</span><span style="color:#F78C6C;">g</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastIndex </span><span style="color:#676E95;">// 0</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(str) </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastIndex </span><span style="color:#676E95;">// 3</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(str) </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastIndex </span><span style="color:#676E95;">// 7</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(str) </span><span style="color:#676E95;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastIndex </span><span style="color:#676E95;">// 10</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(str) </span><span style="color:#676E95;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastIndex </span><span style="color:#676E95;">// 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>由上可见：该开始从下标为 0 处开始匹配，匹配后会自动修改该正则对象的 lastIndex 属性，且修改为当前表达式匹配内容的最后一个字符的下一个位置。一直到字符串结尾，重新设置 lastIndex 为 0。可见其中有一次匹配失败了 <strong>因为从 lastIndex 为 10 开始继续查找就没有匹配的结果了 这一点一定要注意</strong></p><h3 id="_5-2-exec" tabindex="-1">5.2 exec <a class="header-anchor" href="#_5-2-exec" aria-hidden="true">#</a></h3><ul><li><p>语法：regObj.exec(str)对字符串执行搜索</p></li><li><p>返回值：如果没有匹配的文本则返回 null，否则返回一个结果数组：</p></li></ul><p>返回的数组：第一个元素与正则表达式相匹配的文本；第二个元素是与 RegExpObject 的第一个捕获组相匹配的文本（如果有的话）；第三个元素是与 RegExpObject 的第二个捕获组相匹配的文本（如果有的话），以此类推。</p><blockquote><p>该方法在正则对象是否带有全局属性（g）下的表现不同 其表现和 test 一致</p></blockquote><h2 id="_6-字符串实例方法" tabindex="-1">6 字符串实例方法 <a class="header-anchor" href="#_6-字符串实例方法" aria-hidden="true">#</a></h2><h3 id="_6-1-search" tabindex="-1">6.1 search <a class="header-anchor" href="#_6-1-search" aria-hidden="true">#</a></h3><ul><li><p>语法：str.search(reg）找出首次匹配项的索引</p></li><li><p>返回值：返回匹配成功的第一个位置,如果没有任何匹配，则返回-1</p></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">search</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">//1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_6-2-split" tabindex="-1">6.2 split <a class="header-anchor" href="#_6-2-split" aria-hidden="true">#</a></h3><p>语法：str.split(reg[,maxLength]) 第一个参数可以是字符串或者正则表达式，它是分隔符；第二个参数可选，限制返回数组的最大长度。 返回值：数组</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc-def*mno+xyz</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">-*+</span><span style="color:#89DDFF;">]/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">//[&quot;abc&quot;, &quot;def&quot;, &quot;mno&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_6-3-match" tabindex="-1">6.3 match <a class="header-anchor" href="#_6-3-match" aria-hidden="true">#</a></h3><ul><li><p>语法： str.match(reg)找到一个或多个正则表达式的匹配</p></li><li><p>返回值：数组或者 null</p></li></ul><blockquote><p>该方法在正则对象是否带有全局属性（g）下的表现不同</p></blockquote><p><strong>不带 g 时（只查找一次 遇到匹配之后就停止 返回结果和 exec 方法一致）</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12a12b12c1111</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> reg</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+([</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">]+)/</span><span style="color:#A6ACCD;">；</span></span>
<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(reg)</span></span>
<span class="line"><span style="color:#676E95;">//[&quot;12a&quot;, &quot;a&quot;, index: 0, input: &quot;12a12b12c1111&quot;, groups: undefined]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>带 g 时（全局检索 如果找到了一个或多个匹配字符串，则返回一个数组--不包含捕获组）</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12a12b12c1111</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+([</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">]+)/</span><span style="color:#F78C6C;">g</span></span>
<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(reg)</span></span>
<span class="line"><span style="color:#676E95;">//[&quot;12a&quot;, &quot;12b&quot;, &quot;12c&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_6-4-replace" tabindex="-1">6.4 replace <a class="header-anchor" href="#_6-4-replace" aria-hidden="true">#</a></h3><ul><li><p>语法：str.replace(reg/substr,newStr/function) 第一个参数可以是字符串或者正则表达式，它的作用是匹配。第二个参数可以是字符串或者函数，它的作用是替换。</p></li><li><p>返回值：替换了之后的新的字符串，原字符串不变</p></li></ul><p><strong>第一个参数</strong>是字符串和正则表达式的区别在于：正则表达式的表达能力更强，而且可以全局匹配。因此参数是字符串的话只能进行一次替换。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc-xyz-abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">biu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">// &quot;biu-xyz-abc&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc-xyz-abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">biu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">// &quot;biu-xyz-biu&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>第二个参数是字符串时</strong></p><p>replace 方法为第二个参数是字符串的方式提供了一些特殊的变量，能满足一般需求。</p>`,85),D=a(`<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2})</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2})</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{4})/</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">09/05/2020</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(reg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">$3-$2-$1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">// 2020-05-09</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>第二个参数是函数时</strong></p><p>字符串的变量毕竟只能引用，无法操作。与之相对，函数的表达能力就强多了。</p><p>函数的返回值就是要替换的内容。函数如果没有返回值，默认返回 undefined，所以替换内容就是 undefined。</p><p>先看例子</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a1b2c3d4e</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">)(</span><span style="color:#C3E88D;">\\w</span><span style="color:#89DDFF;">)(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">)/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matchStr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">group1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">group2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">group3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">originStr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">group1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">group3</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">//&#39;a12c34e&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p>第一个参数 matchStr 是匹配结果</p></li><li><p>第二个参数以及到倒数第二个参数为止 如果有捕获组，函数的后顺位参数与捕获组一一对应。例如我们例子里面的 group1 到 group3</p></li><li><p>倒数第二个参数是匹配结果在文本中的位置</p></li><li><p>最后一个参数是源文本</p></li></ul><p>ok 我们分析一下例子</p><ol><li>第一次查找匹配到&#39;1b2&#39;</li><li>然后我们 return group1+group3</li><li>group1 是第一个捕获组 就是 1</li><li>group3 是第三个捕获组 2</li><li>字符串&#39;1&#39;+&#39;2&#39;就是&#39;12&#39;</li><li>所以用 12 替换了&#39;1b2&#39;</li><li>第一次替换之后的结果就是&#39;a12&#39;</li><li>然后继续向后查找将&#39;3d4&#39;替换成&#39;34&#39;</li><li>最终结果就是&#39;a12c34e&#39;</li></ol>`,9);function d(F,C,u,A,b,g){const n=r("font");return c(),e("div",null,[y,t("p",null,[s("$ 数字代表相应顺序的捕获组。注意，虽然它是一个变量，但是不要写成模板字符串"),p(n,{color:"#f00"},{default:o(()=>[s("${$1}biu")]),_:1}),s("，replace 内部逻辑会自动解析字符串，提取出变量。")]),D])}const m=l(i,[["render",d]]);export{x as __pageData,m as default};
