import{_ as s,c as a,o as n,a as l}from"./app.ee2e1667.js";const d=JSON.parse('{"title":"如何写优雅的 SQL 原生语句？","description":"","frontmatter":{},"headers":[{"level":2,"title":"语句中各子句完整执行顺序概括（按照顺序号执行）","slug":"语句中各子句完整执行顺序概括-按照顺序号执行","link":"#语句中各子句完整执行顺序概括-按照顺序号执行","children":[{"level":3,"title":"每个子句执行顺序分析","slug":"每个子句执行顺序分析","link":"#每个子句执行顺序分析","children":[]}]},{"level":2,"title":"开发某需求写的一段 sql","slug":"开发某需求写的一段-sql","link":"#开发某需求写的一段-sql","children":[]},{"level":2,"title":"sql 语句中的别名","slug":"sql-语句中的别名","link":"#sql-语句中的别名","children":[]},{"level":2,"title":"书写 sql 语句的注意事项","slug":"书写-sql-语句的注意事项","link":"#书写-sql-语句的注意事项","children":[]}],"relativePath":"front-end/database/intro.md"}'),p={name:"front-end/database/intro.md"},e=l('<h1 id="如何写优雅的-sql-原生语句" tabindex="-1">如何写优雅的 SQL 原生语句？ <a class="header-anchor" href="#如何写优雅的-sql-原生语句" aria-hidden="true">#</a></h1><h2 id="语句中各子句完整执行顺序概括-按照顺序号执行" tabindex="-1">语句中各子句完整执行顺序概括（按照顺序号执行） <a class="header-anchor" href="#语句中各子句完整执行顺序概括-按照顺序号执行" aria-hidden="true">#</a></h2><ol><li>from (注:这里也包括 from 中的子语句)</li><li>join</li><li>on</li><li>where</li><li>group by(开始使用 select 中的别名，后面的语句中都可以使用)</li><li>avg,sum.... 等聚合函数</li><li>having</li><li>select</li><li>distinct</li><li>order by</li><li>limit</li></ol><h3 id="每个子句执行顺序分析" tabindex="-1">每个子句执行顺序分析 <a class="header-anchor" href="#每个子句执行顺序分析" aria-hidden="true">#</a></h3><p>所有的 查询语句都是从 from 开始执行的，在执行过程中，每个步骤都会为下一个步骤生成一个虚拟表，这个虚拟表将作为下一个执行步骤的输入。</p><h4 id="_1-from" tabindex="-1">1. from <a class="header-anchor" href="#_1-from" aria-hidden="true">#</a></h4><p>form 是一次查询语句的开端。</p><ul><li>如果是一张表，会直接操作这张表；</li><li>如果这个 from 后面是一个子查询，会先执行子查询中的内容，子查询的结果也就是第一个虚拟表 T1。（注意：子查询中的执行流程也是按照本篇文章讲的顺序哦）。</li><li>如果需要关联表，使用 join，请看 2，3</li></ul><h4 id="_2-join" tabindex="-1">2. join <a class="header-anchor" href="#_2-join" aria-hidden="true">#</a></h4><p>如果 from 后面是多张表，join 关联，会首先对前两个表执行一个笛卡尔乘积，这时候就会生成第一个虚拟表 T1（注意：这里会选择相对小的表作为基础表）；</p><h4 id="_3-on" tabindex="-1">3. on <a class="header-anchor" href="#_3-on" aria-hidden="true">#</a></h4><p>对虚表 T1 进行 ON 筛选，只有那些符合<code>&lt;join-condition&gt;</code>的行才会被记录在虚表 T2 中。（注意，这里的这里如果还有第三个表与之关联，会用 T2 与第三个表进行笛卡尔乘积生产 T3 表，继续重复 <strong>3.on</strong>步骤生成 T4 表，不过下面的顺序讲解暂时不针对这里的 T3 和 T4，只是从一个表关联查询 T2 继续说）</p><h4 id="_4-where" tabindex="-1">4. where <a class="header-anchor" href="#_4-where" aria-hidden="true">#</a></h4><p>对虚拟表 T2 进行 WHERE 条件过滤。只有符合<code>&lt;where-condition&gt;</code>的记录才会被插入到虚拟表 T3 中。</p><h4 id="_5-group-by" tabindex="-1">5.group by <a class="header-anchor" href="#_5-group-by" aria-hidden="true">#</a></h4><p>group by 子句将中的唯一的值组合成为一组，得到虚拟表 T4。如果应用了 group by，那么后面的所有步骤都只能操作 T4 的列或者是执行 <strong>6.聚合函数（count、sum、avg 等）</strong>。（注意：原因在于分组后最终的结果集中只包含每个组中的一行。谨记，不然这里会出现很多问题，下面的代码误区会特别说。）</p><h4 id="_6-avg-sum-等聚合函数" tabindex="-1">6. avg,sum.... 等聚合函数 <a class="header-anchor" href="#_6-avg-sum-等聚合函数" aria-hidden="true">#</a></h4><p>聚合函数只是对分组的结果进行一些处理，拿到某些想要的聚合值，例如求和，统计数量等，并不生成虚拟表。</p><h4 id="_7-having" tabindex="-1">7. having <a class="header-anchor" href="#_7-having" aria-hidden="true">#</a></h4><p>应用 having 筛选器，生成 T5。HAVING 子句主要和 GROUP BY 子句配合使用，having 筛选器是第一个也是为唯一一个应用到已分组数据的筛选器。</p><h4 id="_8-select" tabindex="-1">8. select <a class="header-anchor" href="#_8-select" aria-hidden="true">#</a></h4><p>执行 select 操作，选择指定的列，插入到虚拟表 T6 中。</p><h4 id="_9-distinct" tabindex="-1">9. distinct <a class="header-anchor" href="#_9-distinct" aria-hidden="true">#</a></h4><p>对 T6 中的记录进行去重。移除相同的行，产生虚拟表 T7.（注意：事实上如果应用了 group by 子句那么 distinct 是多余的，原因同样在于，分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所有的记录都将是不相同的。）</p><h4 id="_10-order-by" tabindex="-1">10. order by <a class="header-anchor" href="#_10-order-by" aria-hidden="true">#</a></h4><p>应用 order by 子句。按照 order_by_condition 排序 T7，此时返回的一个游标，而不是虚拟表。sql 是基于集合的理论的，集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。对表进行排序的查询可以返回一个对象，这个对象包含特定的物理顺序的逻辑组织。这个对象就叫游标。</p><p>order by 的几点说明</p><ul><li>因为 order by 返回值是游标，那么使用 order by 子句查询不能应用于表达式。</li><li>order by 排序是很需要成本的，除非你必须要排序，否则最好不要指定 order by，</li><li>order by 的两个参数 asc（升序排列） desc（降序排列）</li></ul><h4 id="_11-limit" tabindex="-1">11. limit <a class="header-anchor" href="#_11-limit" aria-hidden="true">#</a></h4><p>取出指定行的记录，产生虚拟表 T9, 并将结果返回。</p><p>limit 后面的参数可以是 一个 limit m ，也可以是 limit m n，表示从第 m 条到第 n 条数据。</p><p>（注意：很多开发人员喜欢使用该语句来解决分页问题。对于小数据，使用 LIMIT 子句没有任何问题，当数据量非常大的时候，使用 LIMIT n, m 是非常低效的。因为 LIMIT 的机制是每次都是从头开始扫描，如果需要从第 60 万行开始，读取 3 条数据，就需要先扫描定位到 60 万行，然后再进行读取，而扫描的过程是一个非常低效的过程。所以，对于大数据处理时，是非常有必要在应用层建立一定的缓存机制）</p><h2 id="开发某需求写的一段-sql" tabindex="-1">开发某需求写的一段 sql <a class="header-anchor" href="#开发某需求写的一段-sql" aria-hidden="true">#</a></h2><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">userspk</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">avatar</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_avatar</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">answer_record</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">score</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">score</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> pkrecord  </span><span style="color:#F78C6C;">order by</span><span style="color:#A6ACCD;"> score </span><span style="color:#F78C6C;">desc</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">as</span><span style="color:#A6ACCD;"> a</span></span>\n<span class="line"><span style="color:#F78C6C;">INNER JOIN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">userspk</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">userspk</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#F78C6C;">ON</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">userspk</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">status</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">m_6da5d9e0-4629-11e9-b5f7-694ced396953</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#F78C6C;">GROUP BY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">score</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">DESC</span></span>\n<span class="line"><span style="color:#F78C6C;">LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>查询结果：</p><p><img src="https://imgvip.meishubao.com/msb_global/img/sql_01.png" alt="sql_01"></p><ul><li>先简要说一下我要查询的内容：</li></ul><p>想要查询 pk 记录表中分数最高的 9 个用户记录和他们的头像。</p><ul><li>通过这段 sql 实际想一遍 sql 各字句的执行顺序</li></ul><p>pk 记录表的数据结构设计，每个用户每天每个馆下可能会有多条记录，所以需要进行分组，并且<strong>查询结果只想拿到每个分组内最高的那条记录</strong>。</p><p>这段 sql 的一些说明：</p><ol><li>可能有些同学会认为子查询没有必要，直接查询 pk 记录表就可以，但是并不能拿到预期的结果，因为<strong>分组后的每个组结果是不进行排序的</strong>，而且 max 拿到的最高分数肯定是对应的该分组下最高分数，但是其它记录可能就不是最高分数对应的那条记录。所以子查询非常有必要，<strong>它能够对原始的数据首先进行排序</strong>，分数最高的那条就是第一条对应的第一条记录。</li></ol><p>看一下代码和执行结果与带有子查询的进行比较，就能理解我上面说的一段话：</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">-- 不使用子查询</span></span>\n<span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">userspk</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">avatar</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_avatar</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">pkrecord</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">pkrecord</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">answer_record</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">pkrecord</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">score</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">score</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> pkrecord</span></span>\n<span class="line"><span style="color:#F78C6C;">INNER JOIN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">userspk</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">userspk</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#F78C6C;">ON</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">pkrecord</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">userspk</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">pkrecord</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">status</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">pkrecord</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">m_6da5d9e0-4629-11e9-b5f7-694ced396953</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#F78C6C;">GROUP BY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">pkrecord</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">score</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">DESC</span></span>\n<span class="line"><span style="color:#F78C6C;">LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>查询结果</p><p><img src="https://imgvip.meishubao.com/msb_global/img/sql_02.png" alt=""></p><ol start="2"><li>在子查询中对数据已经进行排序后，外层排序方式如果和子查询排序分数相同，都是分数倒序，外层的排序可以去掉，没有必要写两遍。</li></ol><h2 id="sql-语句中的别名" tabindex="-1">sql 语句中的别名 <a class="header-anchor" href="#sql-语句中的别名" aria-hidden="true">#</a></h2><h4 id="别名在哪些情况使用" tabindex="-1">别名在哪些情况使用 <a class="header-anchor" href="#别名在哪些情况使用" aria-hidden="true">#</a></h4><p>在 SQL 语句中，可以为表名称及字段（列）名称指定别名</p><ul><li>表名称指定别名</li></ul><p>同时查询两张表的数据的时候：</p><p>未设置别名前：</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> article.title,article.content,user.username </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> article, user</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> article.aid</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> article.uid</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">user.uid</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>设置别名后：</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> a.title,a.content,u.username </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> article </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> a, user </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> u </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> a.aid</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">and</span><span style="color:#A6ACCD;"> a.uid</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">u.uid</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>好处：使用表别名查询，可以使 SQL 变得简洁而更易书写和阅读，尤其在 SQL 比较复杂的情况下</p><ul><li>查询字段指定别名</li></ul><p>查询一张表，直接对查询字段设置别名</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> username </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">name</span><span style="color:#A6ACCD;">,email </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> user</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查询两张表</p><p>好处：字段别名一个明显的效果是可以自定义查询数据返回的字段名；当两张表有相同的字段需要都被查询出，使用别名可以完美的进行区分，避免冲突</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> a.title </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> atitle,u.username,u.title </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> utitle </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> article </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> a, user </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> u </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> a.uid</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">u.uid</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>关联查询时候，关联表自身的时候，一些分类表，必须使用别名。</p></li><li><p>别名也可以在 group by 与 having 的时候都可使用</p></li><li><p>别名可以在 order by 排序的时候被使用查看上面一段 sql</p></li><li><p>delete ， update MySQL 都可以使用别名，别名在多表（级联）删除尤为有用</p></li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">delete</span><span style="color:#A6ACCD;"> t1,t2 </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> t_a t1 , t_b t2 </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> t1.id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> t2.id</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>子查询结果需要使用别名查看上面一段 sql</li></ul><h4 id="别名使用注意事项" tabindex="-1">别名使用注意事项 <a class="header-anchor" href="#别名使用注意事项" aria-hidden="true">#</a></h4><ul><li>虽然定义字段别名的 AS 关键字可以省略，但是在使用别名时候，建议不要省略 AS 关键字</li></ul><h2 id="书写-sql-语句的注意事项" tabindex="-1">书写 sql 语句的注意事项 <a class="header-anchor" href="#书写-sql-语句的注意事项" aria-hidden="true">#</a></h2><h4 id="书写规范上的注意" tabindex="-1">书写规范上的注意 <a class="header-anchor" href="#书写规范上的注意" aria-hidden="true">#</a></h4><ul><li>字符串类型的要加单引号</li><li>select 后面的每个字段要用逗号分隔，但是最后连着 from 的字段不要加逗号</li><li>使用子查询创建临时表的时候要使用别名，否则会报错。</li></ul><h4 id="为了增强性能的注意" tabindex="-1">为了增强性能的注意 <a class="header-anchor" href="#为了增强性能的注意" aria-hidden="true">#</a></h4><ul><li>不要使用<code>select * from ……</code>返回所有列，只检索需要的列，可避免后续因表结构变化导致的不必要的程序修改，还可降低额外消耗的资源</li><li>不要检索已知的列</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">user_id</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> User </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">user_id</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">10000050</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>使用可参数化的搜索条件，如=, &gt;, &gt;=, &lt;, &lt;=, between, in, is null 以及 like <code>&lt;literal&gt;%</code>；尽量不要使用非参数化的负向查询，这将导致无法使用索引，如&lt;&gt;, !=, !&gt;, !&lt;, not in, not like, not exists, not between, is not null, like <code>%&lt;literal&gt;</code></p></li><li><p>当需要验证是否有符合条件的记录时，使用 exists，不要使用 count(*)，前者在第一个匹配记录处返回，后者需要遍历所有匹配记录</p></li><li><p>Where 子句中列的顺序与需使用的索引顺序保持一致，不是所有数据库的优化器都能对此顺序进行优化，保持良好编程习惯（索引相关）</p></li><li><p>不要在 where 子句中对字段进行运算或函数（索引相关）</p></li></ul><ol><li><p>如 where amount / 2 &gt; 100，即使 amount 字段有索引，也无法使用，改成 where amount &gt; 100 * 2 就可使用 amount 列上的索引</p></li><li><p>如 where substring( Lastname, 1, 1) = ‘F’就无法使用 Lastname 列上的索引，而 where Lastname like ‘F%’或者 where Lastname &gt;= ‘F’ and Lastname &lt; ‘G’就可以</p></li></ol><ul><li><p>在有 min、max、distinct、order by、group by 操作的列上建索引，避免额外的排序开销（索引相关）</p></li><li><p>小心使用 or 操作，and 操作中任何一个子句可使用索引都会提高查询性能，但是 or 条件中任何一个不能使用索引，都将导致查询性能下降，如 where member_no = 1 or provider_no = 1，在 member_no 或 provider_no 任何一个字段上没有索引，都将导致表扫描或聚簇索引扫描（索引相关）</p></li><li><p>Between 一般比 in/or 高效得多，如果能在 between 和 in/or 条件中选择，那么始终选择 between 条件，并用&gt;=和&lt;=条件组合替代 between 子句，因为不是所有数据库的优化器都能把 between 子句改写为&gt;=和&lt;=条件组合，如果不能改写将导致无法使用索引（索引相关）</p></li><li><p>调整 join 操作顺序以使性能最优，join 操作是自顶向下的，尽量把结果集小的两个表关联放在前面，可提高性能。</p></li></ul>',77),o=[e];function r(t,c,i,C,D,y){return n(),a("div",null,o)}const A=s(p,[["render",r]]);export{d as __pageData,A as default};
