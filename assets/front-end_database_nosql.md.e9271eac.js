import{_ as s,c as r,b as e,e as a,w as i,a as t,r as o,o as d,d as n}from"./app.0f29970b.js";const h="/blog/assets/nosql_01.09415957.png",c="/blog/assets/nosql_02.3f55d4ab.png",p="/blog/assets/nosql_03.2c6f6dfd.png",_="/blog/assets/nosql_04.27b40e9d.png",u="/blog/assets/nosql_05.9fd321aa.png",S="/blog/assets/nosql_06.0077d7da.png",V=JSON.parse('{"title":"SQL 和 NoSQL 的区别与选择","description":"","frontmatter":{},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"关系型数据库","slug":"关系型数据库","link":"#关系型数据库","children":[]},{"level":3,"title":"非关系型数据库","slug":"非关系型数据库","link":"#非关系型数据库","children":[]}]},{"level":2,"title":"二者对比","slug":"二者对比","link":"#二者对比","children":[{"level":3,"title":"存储方式：","slug":"存储方式","link":"#存储方式","children":[]},{"level":3,"title":"表/数据集合的数据的关系","slug":"表-数据集合的数据的关系","link":"#表-数据集合的数据的关系","children":[]},{"level":3,"title":"外部数据存储","slug":"外部数据存储","link":"#外部数据存储","children":[]},{"level":3,"title":"SQL 中的 JOIN 查询","slug":"sql-中的-join-查询","link":"#sql-中的-join-查询","children":[]},{"level":3,"title":"数据耦合性","slug":"数据耦合性","link":"#数据耦合性","children":[]},{"level":3,"title":"事务","slug":"事务","link":"#事务","children":[]},{"level":3,"title":"增删改查语法","slug":"增删改查语法","link":"#增删改查语法","children":[]},{"level":3,"title":"数据完整性","slug":"数据完整性","link":"#数据完整性","children":[]},{"level":3,"title":"查询性能","slug":"查询性能","link":"#查询性能","children":[]}]},{"level":2,"title":"如何选择","slug":"如何选择","link":"#如何选择","children":[{"level":3,"title":"适合使用 SQL 开发的项目：","slug":"适合使用-sql-开发的项目","link":"#适合使用-sql-开发的项目","children":[]},{"level":3,"title":"适合使用 NoSQL 开发的项目：","slug":"适合使用-nosql-开发的项目","link":"#适合使用-nosql-开发的项目","children":[]}]}],"relativePath":"front-end/database/nosql.md"}'),L={name:"front-end/database/nosql.md"},Q=t('<h1 id="sql-和-nosql-的区别与选择" tabindex="-1">SQL 和 NoSQL 的区别与选择 <a class="header-anchor" href="#sql-和-nosql-的区别与选择" aria-hidden="true">#</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-hidden="true">#</a></h2><h3 id="关系型数据库" tabindex="-1">关系型数据库 <a class="header-anchor" href="#关系型数据库" aria-hidden="true">#</a></h3><p>SQL (Structured Query Language) 数据库，指关系型数据库 - 主要代表：SQL Server，Oracle，MySQL(开源)，PostgreSQL(开源)。</p><h3 id="非关系型数据库" tabindex="-1">非关系型数据库 <a class="header-anchor" href="#非关系型数据库" aria-hidden="true">#</a></h3><p>NoSQL（Not Only SQL）泛指非关系型数据库 - 主要代表：MongoDB，Redis，CouchDB。</p><h2 id="二者对比" tabindex="-1">二者对比 <a class="header-anchor" href="#二者对比" aria-hidden="true">#</a></h2><h3 id="存储方式" tabindex="-1">存储方式： <a class="header-anchor" href="#存储方式" aria-hidden="true">#</a></h3><p>SQL 数据存在特定结构的表中；而 NoSQL 则更加灵活和可扩展，存储方式可以是 JSON 文档、哈希表或者其他方式。</p><p>SQL 通常以数据库表形式存储数据。举个栗子，存个学生借书数据：</p>',10),g=e("img",{src:h,alt:"nosql_01"},null,-1),q=t('<p>而 NoSQL 存储方式比较灵活，比如使用类 JSON 文件存储上表中熊大的借阅数据：</p><p><img src="'+c+'" alt="nosql_02"></p><h3 id="表-数据集合的数据的关系" tabindex="-1">表/数据集合的数据的关系 <a class="header-anchor" href="#表-数据集合的数据的关系" aria-hidden="true">#</a></h3><p>在 SQL 中，必须定义好表和字段结构后才能添加数据，例如定义表的主键(primary key)，索引(index),触发器(trigger),存储过程(stored procedure)等。表结构可以在被定义之后更新，但是如果有比较大的结构变更的话就会变得比较复杂。</p><p>在 NoSQL 中，数据可以在任何时候任何地方添加，不需要先定义表。例如下面这段代码会自动创建一个新的&quot;借阅表&quot;数据集合：</p><p><img src="'+p+'" alt="nosql_03"></p><p>自动创建借阅表 NoSQL 也可以在数据集中建立索引。以 MongoDB 为例，会自动在数据集合创建后创建唯一值_id 字段，这样的话就可以在数据集创建后增加索引。</p><p>从这点来看，NoSQL 可能更加适合初始化数据还不明确或者未定的项目中。</p><h3 id="外部数据存储" tabindex="-1">外部数据存储 <a class="header-anchor" href="#外部数据存储" aria-hidden="true">#</a></h3><p>SQL 中如何需要增加外部关联数据的话，规范化做法是在原表中增加一个外键，关联外部数据表。例如需要在借阅表中增加审核人信息，先建立一个审核人表</p>',10),N=e("img",{src:_,alt:"nosql_04"},null,-1),f=e("p",null,"再在原来的借阅人表中增加审核人外键",-1),b=e("img",{src:u,alt:"nosql_05"},null,-1),k=t('<p>这样如果我们需要更新审核人个人信息的时候只需要更新审核人表而不需要对借阅人表做更新。</p><p>而在 NoSQL 中除了这种规范化的外部数据表做法以外，我们还能用如下的非规范化方式把外部数据直接放到原数据集中，以提高查询效率。缺点也比较明显，更新审核人数据的时候将会比较麻烦。</p><p><img src="'+S+'" alt="nosql_06"></p><h3 id="sql-中的-join-查询" tabindex="-1">SQL 中的 JOIN 查询 <a class="header-anchor" href="#sql-中的-join-查询" aria-hidden="true">#</a></h3><p>SQL 中可以使用 JOIN 表链接方式将多个关系数据表中的数据用一条简单的查询语句查询出来。</p><p>而 NoSQL 暂未提供类似 JOIN 的查询方式对多个数据集中的数据做查询。所以大部分 NoSQL 使用非规范化的数据存储方式存储数据。</p><h3 id="数据耦合性" tabindex="-1">数据耦合性 <a class="header-anchor" href="#数据耦合性" aria-hidden="true">#</a></h3><p>SQL 中不允许删除已经被使用的外部数据，例如审核人表中的&quot;熊三&quot;已经被分配给了借阅人熊大，那么在审核人表中将不允许删除熊三这条数据，以保证数据完整性。</p><p>而 NoSQL 中则没有这种强耦合的概念，可以随时删除任何数据。</p><h3 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-hidden="true">#</a></h3><p>事务是 SQL 的一个明显优点，SQL 中如果多张表数据需要同批次被更新，即如果其中一张表更新失败的话其他表也不能更新成功。这种场景可以通过事务来控制，可以在所有命令完成后再统一提交事务。</p><p>在 NoSQL 数据库中，对于一个文档的更新操作是原子性的。换句话说，如果你要更新一个文档中的三个值，要么三个值都更新成功要么它们保持不变。然而，对于操作多个文档时没有事务相对应的操作。在 MongoDB 中有一个操作是 transaction-like options ，但是，需要我们手动的加入到代码中。</p><h3 id="增删改查语法" tabindex="-1">增删改查语法 <a class="header-anchor" href="#增删改查语法" aria-hidden="true">#</a></h3><p>SQL 是一种声明性语言。SQL 语言的功能强大，并且已经成为了一种国际的通用标准，尽管大多数系统在语法上有一些细微的差别。</p><p>NoSQL 数据库使用类似 JOSN 为参数的 JavaScript 来进行查询！基本操作是相同的，但是嵌套的 JSON 将会产生复杂的查询。</p><h3 id="数据完整性" tabindex="-1">数据完整性 <a class="header-anchor" href="#数据完整性" aria-hidden="true">#</a></h3><p>关系型的数据库允许通过定义外键来进行数据库的完整性约束。两个表通过外健约束后，开发者或者用户不能添加、修改和移除一条表的记录，如果这些操作导致数据产生无效的数据或者单条无用记录（也就是常说的脏数据）。</p><p>在 NoSQL 数据库中没有数据完整性的约束选项。你可以存储任何你想要存储的数据。理想情况下，单个文档将是项目的所有信息的唯一来源。</p><h3 id="查询性能" tabindex="-1">查询性能 <a class="header-anchor" href="#查询性能" aria-hidden="true">#</a></h3><p>通常情况下，NoSQL 比 SQL 语言更快。这并没有什么好震惊的，NoSQL 中更加简单的非规范化存储允许我们在一次查询中得到特定项的所有信息。不需要使用 SQL 中复杂的 JOIN 操作。</p><p>也就是说，你的项目的设计和数据的需求会有很大的影响。一个好的 SQL 数据库的设计的表现一定会比一个设计不好的 NoSQL 数据库性能好很多，反之亦然。</p><h2 id="如何选择" tabindex="-1">如何选择 <a class="header-anchor" href="#如何选择" aria-hidden="true">#</a></h2><h3 id="适合使用-sql-开发的项目" tabindex="-1">适合使用 SQL 开发的项目： <a class="header-anchor" href="#适合使用-sql-开发的项目" aria-hidden="true">#</a></h3><ul><li>可以预先定义逻辑相关的离散数据的需求</li><li>数据一致性与完整性是必要的</li><li>具有良好的开发者经验和技术支持的标准的成熟技术</li></ul><h3 id="适合使用-nosql-开发的项目" tabindex="-1">适合使用 NoSQL 开发的项目： <a class="header-anchor" href="#适合使用-nosql-开发的项目" aria-hidden="true">#</a></h3><ul><li>不相关，不确定和逐步发展的数据需求</li><li>更简单或者更宽松的能够快速开始编程的项目</li><li>速度和可扩展性至关重要的，需要对大数据库有性能要求</li><li>需要使用 CouchDB 但因为数据改变太频繁而占满内存</li></ul><blockquote><p>SQL 是精确的。它最适合于具有精确标准的定义明确的项目。典型的使用场景是在线商店和银行系统。</p></blockquote><blockquote><p>NoSQL 是多变的。它最适合于具有不确定需求的数据。典型的使用场景是社交网络，客户管理和网络分析系统。</p></blockquote>',28);function m(x,v,T,O,I,J){const l=o("center");return d(),r("div",null,[Q,e("p",null,[g,a(l,null,{default:i(()=>[n("数据表")]),_:1})]),q,e("p",null,[N,a(l,null,{default:i(()=>[n("审核人表")]),_:1})]),f,e("p",null,[b,a(l,null,{default:i(()=>[n("借阅人表")]),_:1})]),k])}const A=s(L,[["render",m]]);export{V as __pageData,A as default};
