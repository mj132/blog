import{_ as s}from"./chunks/npx_npm_02.c975b85e.js";import{_ as n,c as a,o as l,a as e}from"./app.8ae323eb.js";const p="/blog/assets/npx_npm_01.501685e2.jpg",A=JSON.parse('{"title":"从 npm、npx 说起，到 shell","description":"","frontmatter":{},"headers":[{"level":2,"title":"npm","slug":"npm","link":"#npm","children":[{"level":3,"title":"script","slug":"script","link":"#script","children":[]},{"level":3,"title":"bin","slug":"bin","link":"#bin","children":[]}]},{"level":2,"title":"npx","slug":"npx","link":"#npx","children":[{"level":3,"title":"调用项目内部安装的模块","slug":"调用项目内部安装的模块","link":"#调用项目内部安装的模块","children":[]},{"level":3,"title":"避免全局安装模块","slug":"避免全局安装模块","link":"#避免全局安装模块","children":[]},{"level":3,"title":"执行 GitHub 源码","slug":"执行-github-源码","link":"#执行-github-源码","children":[]}]},{"level":2,"title":"Shell","slug":"shell","link":"#shell","children":[{"level":3,"title":"含义","slug":"含义","link":"#含义","children":[]},{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"Bash","slug":"bash","link":"#bash","children":[]},{"level":3,"title":"cmd.exe","slug":"cmd-exe","link":"#cmd-exe","children":[]}]}],"relativePath":"front-end/other/npx_npm.md"}'),o={name:"front-end/other/npx_npm.md"},c=e('<h1 id="从-npm、npx-说起-到-shell" tabindex="-1">从 npm、npx 说起，到 shell <a class="header-anchor" href="#从-npm、npx-说起-到-shell" aria-hidden="true">#</a></h1><blockquote><p>背景：目前整个我们前端工程栈有多处 CLI（包括工具、模板等等），CLI 带来了巨大的便利性，但其在 Windows 下执行往往和 Mac/Unix 系统下表现不同。今天想从 <code>npm run &lt;command&gt;</code> 命令开始，尽可能的阐述一下整条链~~~</p></blockquote><p><img src="'+p+`" alt="npx_npm_01"></p><h2 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h2><h3 id="script" tabindex="-1">script <a class="header-anchor" href="#script" aria-hidden="true">#</a></h3><ul><li>项目的相关脚本，可以集中在一个地方（这里指入口）</li><li>以利用 npm 提供的很多辅助功能，以及不同项目的脚本命令，只要功能相同，就可以有同样的对外接口（如 npm run test，不管是 mocha 还会 jasmine）</li></ul><p>npm 脚本的原理非常简单。每当执行 <code>npm run</code>，就会<strong>自动新建一个 Shell</strong>，在这个 Shell 里面执行指定的脚本命令。因此，只要是 Shell（一般是 <a href="./../linux/shell_script.html"><strong>Bash</strong></a>）可以运行的命令，就可以写在 npm 脚本里面。</p><p>In addition to the shell&#39;s pre-existing <code>PATH</code>, npm run adds <code>node_modules/.bin</code> to the <code>PATH</code> provided to scripts. Any binaries provided by locally-installed dependencies can be used without the <code>node_modules/.bin</code> prefix.</p><p>比较特别的是，<code>npm run</code> 新建的这个 Shell，会将当前目录的 <code>node_modules/.bin</code> 子目录加入 <code>PATH</code> 变量，执行结束后，再将 <code>PATH</code> 变量恢复原样。</p><p>这意味着，当前目录的 <code>node_modules/.bin</code> 子目录里面的所有脚本，都可以直接用脚本名调用，而不必加上路径。比如，当前项目的依赖里面有 Mocha，只要直接写 <code>mocha test</code> 就可以了。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mocha test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./node_modules/.bin/mocha test</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>由于 npm 脚本的唯一要求就是可以在 Shell 执行，因此它不一定是 Node 脚本，任何可执行文件都可以写在里面。npm 脚本的退出码，也遵守 Shell 脚本规则。如果退出码不是 0，npm 就认为这个脚本执行失败。</p><blockquote><p>退出码对于命令的串行执行意义重大：<a href="https://ligang.blog.csdn.net/article/details/105909789" target="_blank" rel="noreferrer">npm 并行&amp;串行执行多个 scripts 命令</a></p></blockquote><p>The actual shell your script is run within is platform dependent. By default, on Unix-like systems it is the <code>/bin/sh</code> command, on Windows it is the <code>cmd.exe</code>. The actual shell referred to by <code>/bin/sh</code> also depends on the system. As of <code>npm@5.1.0</code> you can customize the shell with the <code>script-shell</code> configuration.</p><p>脚本在 shell 中运行，取决于平台。<strong>类 Unix 系统，是 <code>/bin/sh</code> 命令（引用的实际 shell 也取决于系统，通常是 Bash）； windows 系统是 <code>cmd.exe</code></strong></p><h3 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-hidden="true">#</a></h3><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">my-cli</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./cli.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>When in local mode, executables are linked into <code>./node_modules/.bin</code> so that they can be made available to scripts run through npm.</p><p>Any bin files are symlinked to <code>./node_modules/.bin/</code>, so that they may be found by npm scripts when necessary.</p></blockquote><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 此符号链接是在 npm/yarn install @idss/git-commit-cli 时创建的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ ls -l node_modules/.bin/idss-git-commit</span></span>
<span class="line"><span style="color:#A6ACCD;">lrwxr-xr-x 1 ligang staff 37 5 25 18:12 node_modules/.bin/idss-git-commit -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ../@idss/git-commit-cli/git/commit.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>如果是全局安装，npm 将会使用符号链接把这些文件链接到 <code>/usr/local/bin/</code></li><li>如果是本地安装，会链接到 <code>./node_modules/.bin/</code></li></ul><p>windows 下会生成两个文件：mycli、mycli.cmd</p><p>在 windows 下开发，推荐使用 git bash，安装后就拥有了类 linux 的环境。</p><p><strong>环境变量（如：当前工作目录）</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">p<wbr>rocess.env.PWD </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> p<wbr>rocess.env.INIT_CWD</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>p<wbr>rocess.env.PWD</code> 是 <a href="http://nodejs.cn/api/process.html#process_process_env" target="_blank" rel="noreferrer">Node Api</a></li><li><code>p<wbr>rocess.env.INIT_CWD</code> 是 <a href="https://github.com/yarnpkg/yarn/pull/5656" target="_blank" rel="noreferrer">Npm/Yarn 追加的环境变量</a></li></ul><h2 id="npx" tabindex="-1">npx <a class="header-anchor" href="#npx" aria-hidden="true">#</a></h2><p>npm 从 5.2 版开始，增加了 npx 命令。Node 自带 npm 模块，所以可以直接使用 npx 命令。</p><h3 id="调用项目内部安装的模块" tabindex="-1">调用项目内部安装的模块 <a class="header-anchor" href="#调用项目内部安装的模块" aria-hidden="true">#</a></h3><p>一般来说，调用 Mocha ，只能在项目脚本和 package.json 的 scripts 字段里面， 如果想在命令行下调用，必须像下面这样。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 项目的根目录下执行</span></span>
<span class="line"><span style="color:#A6ACCD;">$ node-modules/.bin/mocha --version</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>npx 就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ npx mocha --version</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>npx 的原理很简单，就是运行的时候，会到 <code>node_modules/.bin</code> 路径和环境变量<code>$PATH</code> 里面，检查命令是否存在。由于 npx 会检查环境变量 <code>$PATH</code>，所以系统命令也可以调用。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 等同于 ls</span></span>
<span class="line"><span style="color:#A6ACCD;">$ npx ls</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意，Bash 内置的命令不在 <code>$PATH</code> 里面，所以不能用。比如，<code>cd</code> 是 Bash 命令，因此就不能用 <code>npx cd</code>。</p><h3 id="避免全局安装模块" tabindex="-1">避免全局安装模块 <a class="header-anchor" href="#避免全局安装模块" aria-hidden="true">#</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ npx @vue/cli create project</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>npx 将 <code>@vue/cli</code> 下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载。</p><blockquote><p>使用不同版本的 node</p></blockquote><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ npx node@0.12.8 -v</span></span>
<span class="line"><span style="color:#A6ACCD;">$ npx -p node@8 npm run build</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="执行-github-源码" tabindex="-1">执行 GitHub 源码 <a class="header-anchor" href="#执行-github-源码" aria-hidden="true">#</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 执行仓库代码</span></span>
<span class="line"><span style="color:#A6ACCD;">$ npx </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">/</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">repo_name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;">#&lt;branch_name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">$ npx 381510688/npm_test my-cli</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意，远程代码必须是一个模块，即必须包含 <code>package.json</code> 和入口脚本 <code>bin</code>。</p><h2 id="shell" tabindex="-1">Shell <a class="header-anchor" href="#shell" aria-hidden="true">#</a></h2><h3 id="含义" tabindex="-1">含义 <a class="header-anchor" href="#含义" aria-hidden="true">#</a></h3><ul><li>Shell 是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（commandline，简写为 CLI）。Shell 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户</li><li>Shell 是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 Shell 命令写出各种小程序，又称为脚本（script）。这些脚本都通过 Shell 的解释执行，而不通过编译</li><li>Shell 是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能</li><li>(YY)：在排序算法中，Shell 是希尔排序的名称。</li></ul><h3 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-hidden="true">#</a></h3><p>不同系统有不同的 shell</p><ul><li>Bourne Shell（sh）</li><li><strong>Bourne Again shell（bash）</strong></li><li>C Shell（csh）</li><li>TENEX C Shell（tcsh）</li><li>Korn shell（ksh）</li><li>Z Shell（zsh）</li><li>Friendly Interactive Shell（fish）</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 查看当前运行的 Shell</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">SHELL</span></span>
<span class="line"><span style="color:#A6ACCD;">MacOS: /bin/zsh</span></span>
<span class="line"><span style="color:#A6ACCD;">Linux: /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 查看当前的 Linux 系统安装的所有 Shell</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ cat /etc/shells</span></span>
<span class="line"><span style="color:#A6ACCD;">/bin/bash</span></span>
<span class="line"><span style="color:#A6ACCD;">/bin/csh</span></span>
<span class="line"><span style="color:#A6ACCD;">/bin/ksh</span></span>
<span class="line"><span style="color:#A6ACCD;">/bin/sh</span></span>
<span class="line"><span style="color:#A6ACCD;">/bin/tcsh</span></span>
<span class="line"><span style="color:#A6ACCD;">/bin/zsh</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="bash" tabindex="-1">Bash <a class="header-anchor" href="#bash" aria-hidden="true">#</a></h3><p>Bash 是目前最常用的 Shell。在 linux 系统中，通常是 Bash。<code>/bin/zsh</code> Z Shell 是 Bash 扩展，带有数量庞大的改进。</p><p>Bash，Unix shell 的一种，在 1987 年由布莱恩·福克斯为了 GNU 计划而编写。其能运行于大多数 Unix 系统的操作系统之上，包括 Linux 和 Mac OS 都将他作为默认 shell。</p><blockquote><p>NU 计划（英语：GNU Project）：目标是创建一套完全自由的操作系统，称为 GNU。附带一份《GNU 宣言》等解释为何发起该计划的文章，其中一个理由就是要“重现当年软件界合作互助的团结精神”。 在一般的 linux 系统当中（如 redhat），使用 sh 调用执行脚本相当于打开了 bash 的 POSIX 标准模式</p></blockquote><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ ll -h /bin/sh</span></span>
<span class="line"><span style="color:#A6ACCD;">lrwxrwxrwx. 1 root root 4 10 月 19 2018 /bin/sh -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="命令行环境" tabindex="-1">命令行环境 <a class="header-anchor" href="#命令行环境" aria-hidden="true">#</a></h4><p>终端模拟器，一个模拟命令行窗口的程序，让用户在一个窗口中使用命令行环境，并且提供各种附加功能，比如调整颜色、字体大小、行距等等。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 启动 Bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 退出 Bash 环境（也可以同时按下 Ctrl + d）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">exit</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-hidden="true">#</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">command</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> arg1 ... </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> argN </span><span style="color:#89DDFF;">]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>使用空格（或 Tab 键）区分不同的参数</li><li>分号（;）是命令的结束符，使得一行可以放置多个命令</li><li><code>Command1 &amp;&amp; Command2</code> 如果 <code>Command1</code> 命令运行成功，则继续运行 <code>Command2</code> 命令</li><li><code>Command1 || Command2</code> 如果 <code>Command1</code> 命令运行失败，则继续运行 <code>Command2</code> 命令</li><li></li></ul><p>echo：在屏幕输出一行文本，可以将该命令的参数原样输出</p><ul><li>-n：可以取消末尾的回车符，使得下一个提示符紧跟在输出内容的后面</li><li>-e：会解释引号（双引号和单引号）里面的特殊字符（比如换行符\\n）；否则原样输出</li><li></li></ul><p>快捷键:</p><ul><li>Ctrl + L：清除屏幕并将当前行移到页面顶部。</li><li>Ctrl + C：中止当前正在执行的命令。</li><li>Shift + PageUp：向上滚动。</li><li>Shift + PageDown：向下滚动。</li><li>Ctrl + U：从光标位置删除到行首。</li><li>Ctrl + K：从光标位置删除到行尾。</li><li>Ctrl + D：关闭 Shell 会话。</li><li>↑，↓：浏览已执行命令的历史记录。</li></ul><h4 id="模式扩展" tabindex="-1">模式扩展 <a class="header-anchor" href="#模式扩展" aria-hidden="true">#</a></h4><p>模式扩展与正则表达式的关系是，模式扩展早于正则表达式出现，可以看作是原始的正则表达式。它的功能没有正则那么强大灵活，但是优点是简单和方便</p><p><img src="`+s+`" alt="npx_npm_02"></p><h4 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-hidden="true">#</a></h4><p>环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，可以直接使用</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 示所有环境变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ env</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li>Bash 变量名区分大小写，HOME 和 home 是两个不同的变量</li><li>Bash 没有数据类型的概念，所有的变量值都是字符串</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 创建变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ myvar=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 读取变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">myvar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 删除变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">unset</span><span style="color:#A6ACCD;"> myvar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 输出变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> myvar=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>declare</code> 声明一些特殊类型的变量，比如声明只读类型的变量和整数类型的变量</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> -i val1=12</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>子 Shell 如果修改继承的变量，不会影响父 Shell</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 输出变量 $foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> foo=bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 新建子 Shell</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 读取 $foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">foo</span></span>
<span class="line"><span style="color:#A6ACCD;">bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 修改继承的变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ foo=baz</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 退出子 Shell</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">exit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 读取 $foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">foo</span></span>
<span class="line"><span style="color:#A6ACCD;">bar</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="here-文档" tabindex="-1">Here 文档 <a class="header-anchor" href="#here-文档" aria-hidden="true">#</a></h4><p>Here 文档（here document）是一种输入多行字符串的方法，格式如下。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">token</span></span>
<span class="line"><span style="color:#C3E88D;">text</span></span>
<span class="line"><span style="color:#89DDFF;">token</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>它的格式分成开始标记（<code>&lt;&lt; token</code>）和结束标记（<code>token</code>）。开始标记是两个小于号 + Here 文档的名称，名称可以随意取，后面必须是一个换行符；结束标记是单独一行顶格写的 Here 文档名称，如果不是顶格，结束标记不起作用。两者之间就是多行字符串的内容。</p><h4 id="脚本" tabindex="-1">脚本 <a class="header-anchor" href="#脚本" aria-hidden="true">#</a></h4><h5 id="shebang-行" tabindex="-1">Shebang 行 <a class="header-anchor" href="#shebang-行" aria-hidden="true">#</a></h5><p>脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以#!字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。</p><p><code>#!</code> 后面就是脚本解释器的位置，Bash 脚本的解释器一般是 <code>/bin/sh</code> 或 <code>/bin/bash</code>。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#!/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 或者</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#!/bin/bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>#!</code> 与脚本解释器之间有没有空格，都是可以的。</p><p>如果 Bash 解释器不放在目录 <code>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#!/usr/bin/env bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># node 脚本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#!/usr/bin/env node</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>#!/usr/bin/env NAME</code> 这个语法的意思是，让 Shell 查找 <code>$PATH</code> 环境变量里面第一个匹配的 NAME。如果你不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。</p><h5 id="执行权限和路径" tabindex="-1">执行权限和路径 <a class="header-anchor" href="#执行权限和路径" aria-hidden="true">#</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 给所有用户读权限和执行权限</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ chmod 755 script.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>一般需要指定脚本的路径（比如 <code>path/script.sh</code>）。如果将脚本放在环境变量$PATH 指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># ~/.bashrc 或 ~/.bash_profile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 在 ~/.bin 目录下不需要再加 path</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> PATH=</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">PATH:</span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">/bin</span></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">/.bash_profile</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="脚本参数" tabindex="-1">脚本参数 <a class="header-anchor" href="#脚本参数" aria-hidden="true">#</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ script.sh word1 word2 word3</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>脚本文件内部，可以使用特殊变量，引用这些参数。</p><ul><li><code>$0</code>：脚本文件名，即 <code>script.sh</code>。</li><li><code>$1~$9</code>：对应脚本的第一个参数到第九个参数。</li><li><code>$#</code>：参数的总数。</li><li><code>$@</code>：全部的参数，参数之间使用空格分隔。</li><li><code>$*</code>：全部的参数，参数之间使用变量 <code>$IFS</code> 值的第一个字符分隔，默认为空格，但是可以自定义。</li></ul><h5 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-hidden="true">#</a></h5><p>如果脚本里面有运行失败的命令（返回值非 0），Bash 默认会继续执行后面的命令（只是显示有错误，并没有终止执行）。</p><p>这种行为很不利于脚本安全和除错。实际开发中，如果某个命令失败，往往需要脚本停止执行，防止错误累积。这时，一般采用下面的写法。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">command</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> 1</span></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">command</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">command failed</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> 1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="set-命令" tabindex="-1">set 命令 <a class="header-anchor" href="#set-命令" aria-hidden="true">#</a></h5><p>set 可以控制脚本的安全性和可维护性。<a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html" target="_blank" rel="noreferrer">https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html</a></p><p>Bash 执行脚本的时候（包括上述讲述的 <code>npm run script</code>），会创建一个新的 Shell（这个 Shell 就是脚本的执行环境，Bash 默认给定了这个环境的各种参数）set 命令用来修改 Shell 环境的运行参数，也就是可以定制环境</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#!/usr/bin/env bash</span></span>
<span class="line"><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> -euxo</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>set -u</code>：遇到不存在的变量就会报错，并停止执行（默认忽略跳过）</li><li><code>set -x</code>：在运行结果之前，先输出执行的那一行命令（默认情况下，脚本执行后，屏幕只显示运行结果，没有其他内容）</li><li><code>set -e</code>：使得脚本只要发生错误，就终止执行（彻底解决上述「错误处理」；不适用于管道命令）</li><li><code>set -o</code>：只要一个子命令失败，整个管道命令就失败，脚本就会终止执行</li></ul><h5 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-hidden="true">#</a></h5><ul><li>read [-options][variable...]：脚本需要在执行过程中，由用户提供一部分数据，这时可以使用 read 命令；它将用户的输入存入一个变量，方便后面的代码使用。用户按下回车键，就表示输入结束</li><li>if commands; then commands</li><li>循环</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> condition</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">commands</span></span>
<span class="line"><span style="color:#89DDFF;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># for...in</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> variable </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> list</span></span>
<span class="line"><span style="color:#89DDFF;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">commands</span></span>
<span class="line"><span style="color:#89DDFF;">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="cmd-exe" tabindex="-1">cmd.exe <a class="header-anchor" href="#cmd-exe" aria-hidden="true">#</a></h3><p>cmd.exe 是微软 Windows 系统的命令处理程序。命令提示符为用户提供了一个命令行界面，该功能通过 Win32 控制台实现。用户可通过命令行运行程序和批处理文件，从而进行系统管理等。此外，命令提示符还支持管道和重定向功能。</p><p>Windows 上的旧命令行工具 cmd.exe 处于维护模式，PowerShell 则代表着未来。</p><p>PowerShell 是一个 Windows 任务自动化的框架，它由一个命令行 shell 和内置在这个 .NET 框架上的编程语言组成，可以利用 .NET Framework 的强大功能。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ .\\node_modules\\.bin\\webpack</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,115),r=[c];function i(t,d,b,h,u,m){return l(),a("div",null,r)}const D=n(o,[["render",i]]);export{A as __pageData,D as default};
