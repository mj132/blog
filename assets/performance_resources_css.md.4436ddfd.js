import{_ as s,c as a,o as n,a as l}from"./app.8ae323eb.js";const p="/blog/assets/fb-skeleton.72cb9b7b.png",e="/blog/assets/priority.e09c3381.png",o="/blog/assets/priority-css.de861859.png",b=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 关键 CSS","slug":"_1-关键-css","link":"#_1-关键-css","children":[]},{"level":2,"title":"2. 优化资源请求","slug":"_2-优化资源请求","link":"#_2-优化资源请求","children":[{"level":3,"title":"2.1. 按需加载","slug":"_2-1-按需加载","link":"#_2-1-按需加载","children":[]},{"level":3,"title":"2.2. 合并文件","slug":"_2-2-合并文件","link":"#_2-2-合并文件","children":[]},{"level":3,"title":"2.3. 请求的优先级排序","slug":"_2-3-请求的优先级排序","link":"#_2-3-请求的优先级排序","children":[]},{"level":3,"title":"2.4. 慎用 @import","slug":"_2-4-慎用-import","link":"#_2-4-慎用-import","children":[]},{"level":3,"title":"2.5. 谨慎对待 JavaScript 脚本的位置","slug":"_2-5-谨慎对待-javascript-脚本的位置","link":"#_2-5-谨慎对待-javascript-脚本的位置","children":[]}]},{"level":2,"title":"3. 减少包体大小","slug":"_3-减少包体大小","link":"#_3-减少包体大小","children":[{"level":3,"title":"3.1. 压缩","slug":"_3-1-压缩","link":"#_3-1-压缩","children":[]},{"level":3,"title":"3.2. 选择合适的兼容性","slug":"_3-2-选择合适的兼容性","link":"#_3-2-选择合适的兼容性","children":[]}]},{"level":2,"title":"4. 解析与渲染树构建","slug":"_4-解析与渲染树构建","link":"#_4-解析与渲染树构建","children":[{"level":3,"title":"4.1. 简化选择器","slug":"_4-1-简化选择器","link":"#_4-1-简化选择器","children":[]},{"level":3,"title":"4.2. 避免使用昂贵的属性","slug":"_4-2-避免使用昂贵的属性","link":"#_4-2-避免使用昂贵的属性","children":[]},{"level":3,"title":"4.3. 使用先进的布局方式","slug":"_4-3-使用先进的布局方式","link":"#_4-3-使用先进的布局方式","children":[]}]},{"level":2,"title":"5. 利用缓存","slug":"_5-利用缓存","link":"#_5-利用缓存","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"relativePath":"performance/resources/css.md"}'),r={name:"performance/resources/css.md"},t=l('<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-hidden="true">#</a></h1><p>在这一部分，我们来详细看一看与 CSS 相关的优化内容。其中一部分内容与 JavaScript 部分类似，另一部分可能是 CSS 特有的一些优化或注意事项。</p><h2 id="_1-关键-css" tabindex="-1">1. 关键 CSS <a class="header-anchor" href="#_1-关键-css" aria-hidden="true">#</a></h2><p>在性能优化上，其实我们会更关注关键渲染路径（Critical Rendering Path，即 CRP），而不一定是最快加载完整个页面。</p><p>CRP 是指优先显示与当前用户操作有关的内容。由于 CSS 会“间接”阻塞页面的解析，所以在这个过程中的 CSS 也被称为关键 CSS。识别出当前业务中的关键 CSS，优先下载与解析它，将会帮助我们更好降低延迟。</p><p>所以我们首先还是需要先建立好概念：很多时候，我们并不是在追求整体页面的最快加载，而是最核心最关键的那部分。例如在视频网站上可能是播放器，在文档站点可能是阅读器。</p><p>由于很多时候，关键 CSS 不会太大，因此有一种常见的优化措施是，将关键 CSS 的内容通过 <code>&lt;style&gt;</code> 标签内联到 <code>&lt;head&gt;</code> 中，然后异步加载其他非关键 CSS。这样对于关键路径的渲染可以减少一次 RTT (Round-Trip Time)。用户可以更快看到一些页面初始的渲染结果。</p><p>经典的<a href="https://uxdesign.cc/what-you-should-know-about-skeleton-screens-a820c45a571a" target="_blank" rel="noreferrer">骨架屏</a><sup>[1]</sup>可以算是这种思路的一个延展。我们会生成一个不包含实际功能的静态页面，将必要的脚本、样式、甚至图片（base64）资源都内联到其中，当用户访问时直接先返回该页面，就可以很快让用户看到页面结果，之后在异步渐进加载预渲染，就会让用户感觉“很快”。</p><p><img src="'+p+'" alt="facebook skeleton"></p><p>骨架屏可以<a href="https://css-tricks.com/building-skeleton-screens-css-custom-properties/" target="_blank" rel="noreferrer">手动编写</a><sup>[2]</sup>，当然也可以通过<a href="https://github.com/ElemeFE/page-skeleton-webpack-plugin" target="_blank" rel="noreferrer">编译插件</a>来帮助你<a href="https://zhuanlan.zhihu.com/p/34702561" target="_blank" rel="noreferrer">自动生成</a><sup>[3]</sup>骨架屏。</p><h2 id="_2-优化资源请求" tabindex="-1">2. 优化资源请求 <a class="header-anchor" href="#_2-优化资源请求" aria-hidden="true">#</a></h2><h3 id="_2-1-按需加载" tabindex="-1">2.1. 按需加载 <a class="header-anchor" href="#_2-1-按需加载" aria-hidden="true">#</a></h3><p>与 JavaScript 类似，我们的 CSS 也是可以按需加载的。尤其在当下组件化盛行的潮流里，组件的按需加载就可能会包括了 JavaScript 脚本、CSS 样式表、图标图片。在上一部分介绍的 <a href="./javascript.html#_1-1-代码拆分-code-split-与按需加载">webpack code split</a> 也会包含这一部分。</p><p>除了使用一些构建工具以及对应的插件外，你也可以使用 <a href="https://github.com/filamentgroup/loadCSS" target="_blank" rel="noreferrer">loadCSS</a> 这样的库来实现 CSS 文件的按需异步加载。</p><h3 id="_2-2-合并文件" tabindex="-1">2.2. 合并文件 <a class="header-anchor" href="#_2-2-合并文件" aria-hidden="true">#</a></h3><p>同样的，参照 JavaScript，我们也可以把一些 CSS 文件进行合并来减少请求数。</p><h3 id="_2-3-请求的优先级排序" tabindex="-1">2.3. 请求的优先级排序 <a class="header-anchor" href="#_2-3-请求的优先级排序" aria-hidden="true">#</a></h3><p>浏览器中的各类请求是有优先级排序的。低优请求会被排在高优之后再发送。</p><p><img src="'+e+`" alt="network priority"></p><p>不过可惜的是，浏览器没有将优先级排序的能力给我们直接开放出来。但在一些场景下，我们可以通过更合理的使用媒体类型和媒体查询来实现资源加载的优先级。下面会介绍一下这种方法。</p><p>一些网站为了达到不同屏幕之间的兼容，可能会使用媒体查询的方式来构建它的样式系统。一般而言，我们都会把样式代码写在一起，例如导航的在各类屏幕下的样式都会放在 <code>navigator.css</code> 下，列表都会放在 <code>list.css</code> 下。</p><div class="language-HTML line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">navigator.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">list.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这里带来的一个问题就是，在宽度小于 400px 的场景下，其实并不需要应用宽度 400px 以上的 CSS 样式。针对这个问题，<code>link</code> 标签上其实有一个 <code>media</code> 属性来处理媒体查询下的加载优先级。浏览器会优先下载匹配当前环境的样式资源，相对的，其他非匹配的优先级会下降。</p><div class="language-HTML line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">navigator.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">media</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">list.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">media</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">navigator.small.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">media</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(max-width: 500px)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">list.small.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">media</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(max-width: 500px)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样拆分后，当页面大于 500 px 时，<code>navigator.small.css</code> 和 <code>list.small.css</code> 的优先级会降低，同时，<strong>它们也不再会阻塞页面的渲染</strong>。需要注意的是，优先级降低代表可能会后加载，并非不加载。</p><p><img src="`+o+`" alt="css network priority"></p><h3 id="_2-4-慎用-import" tabindex="-1">2.4. 慎用 <code>@import</code> <a class="header-anchor" href="#_2-4-慎用-import" aria-hidden="true">#</a></h3><p>CSS 提供了一个 <code>@import</code> 语法来加载外部的样式文件。然而，这会把你的请求变得串行化。</p><p>考虑 <code>index.css</code> 这个资源，页面上是这么引用的：</p><div class="language-HTML line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>而在 <code>index.css</code> 中引用了 <code>other.css</code></p><div class="language-CSS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">/* index.css */</span></span>
<span class="line"><span style="color:#89DDFF;">@import</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">url</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">other.css</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样浏览器只有当下载了 <code>index.css</code> 并解析到其中 <code>@import</code> 时，才会再去请求 <code>other.css</code>。这是一个串行过程。</p><p>而如果我们把它改造为</p><div class="language-HTML line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">other.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>那就不需要等待 <code>index.css</code> 下载，几乎是并行执行了。</p><h3 id="_2-5-谨慎对待-javascript-脚本的位置" tabindex="-1">2.5. 谨慎对待 JavaScript 脚本的位置 <a class="header-anchor" href="#_2-5-谨慎对待-javascript-脚本的位置" aria-hidden="true">#</a></h3><p>在<a href="./../parse.html#_1-注意资源在页面文档中的位置">第四站「页面解析与处理」</a>中，我们提到将 “JavaScript 脚本放到页面尾部、CSS 放到页面头部”的模式。这只是大多数情况的处理方式。对于一些特殊情况，我们还是需要特殊处理的。</p><p>还记得之前提到的一些统计类、监控类的第三方脚本么？一般而言，第三方会提供你如下一段脚本，然后推荐你内联到页面中：</p><div class="language-HTML line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> script </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vendor.lib.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementsByTagName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">head</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(script)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们希望通过这样的方式来尽快异步加载脚本。然而，如果我们一不小心出现了下面这样的操作，可能会事与愿违：</p><div class="language-HTML line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">navigator.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> script </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vendor.lib.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementsByTagName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">head</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(script)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这时，<code>navigator.css</code> 的加载会阻塞后面的 JavaScript 执行，这是为了防止后续脚本对样式的查询出现不确定性。所以，这两个资源就变成了串行加载。</p><p>要优化这个问题很简单 —— 调换一下顺序即可：</p><div class="language-HTML line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> script </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vendor.lib.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementsByTagName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">head</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(script)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">navigator.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这时，<code>vendor.lib.js</code> 和 <code>navigator.css</code> 就会并行加载了。当然，你需要确保不需要查询 <code>navigator.css</code> 样式应用后的信息。</p><h2 id="_3-减少包体大小" tabindex="-1">3. 减少包体大小 <a class="header-anchor" href="#_3-减少包体大小" aria-hidden="true">#</a></h2><h3 id="_3-1-压缩" tabindex="-1">3.1. 压缩 <a class="header-anchor" href="#_3-1-压缩" aria-hidden="true">#</a></h3><p>CSS 同样可以进行压缩，与 JavaScript 类似，也有相应的 CSS uglify 工具，例如 <a href="https://github.com/jakubpawlowicz/clean-css" target="_blank" rel="noreferrer">clean-css</a>，可以优化代码、删除多余的换行与空格。</p><p>同时，由于 CSS 同样是文本内容，因此针对文本的各类压缩算法同样适用，最常用到的就是 gzip。如何在 Nginx 上开启它<a href="./javascript.html#_2-1-代码压缩">之前也介绍过</a>，这里就不赘述了。</p><h3 id="_3-2-选择合适的兼容性" tabindex="-1">3.2. 选择合适的兼容性 <a class="header-anchor" href="#_3-2-选择合适的兼容性" aria-hidden="true">#</a></h3><p>对于 CSS 的 polyfill，同样可以配合 browserslist 来实现你的业务场景下的兼容性支持。比较常见的是配合 <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noreferrer">Autoprefixer</a> 和 <a href="https://github.com/csstools/postcss-preset-env" target="_blank" rel="noreferrer">PostCSS Preset Env</a> 来使用。可以根据指定的浏览器范围，决定使用哪些 CSS polyfill 来帮助你将新的 CSS 代码转换为旧的浏览器能识别的内容。</p><h2 id="_4-解析与渲染树构建" tabindex="-1">4. 解析与渲染树构建 <a class="header-anchor" href="#_4-解析与渲染树构建" aria-hidden="true">#</a></h2><h3 id="_4-1-简化选择器" tabindex="-1">4.1. 简化选择器 <a class="header-anchor" href="#_4-1-简化选择器" aria-hidden="true">#</a></h3><p>在 <a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="noreferrer">浏览器的工作原理：新式网络浏览器幕后揭秘</a> 一文中，作者介绍了样式计算的原理。虽然文章发布时间比较早了，但其中部分内容还是具有参考价值的。</p><p>其中指出了，样式数据是一个超大的结构，为每一个元素查找匹配的规则会造成性能问题，同时，复杂的层叠规则也会带来很高的复杂度。针对这些问题<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Style_Computation" target="_blank" rel="noreferrer">浏览器也做了很多优化</a><sup>[4]</sup>。</p><p>正是由于这些问题，我们应该尽量避免不必要的选择器复杂度。例如下面这个复杂选择器：</p><div class="language-CSS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">section</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">intro</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">h2</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">nth-of-type</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">odd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">first-line</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">$=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.pdf</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">/* …… */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>不过一般情况下我们是不会写出如此复杂的选择器的。但有一个情况还是需要注意一下，就是使用 SASS、LESS 这样的工具时，避免过多的嵌套。以 LESS 为例：</p><div class="language-CSS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    .item {</span></span>
<span class="line"><span style="color:#A6ACCD;">        .product {</span></span>
<span class="line"><span style="color:#A6ACCD;">            .intro {</span></span>
<span class="line"><span style="color:#A6ACCD;">                .pic {</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>由于过多的嵌套，编译后会产生如下选择器：</p><div class="language-CSS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">product</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">intro</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">pic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然，你也可以考虑使用类似 <a href="https://en.bem.info/" target="_blank" rel="noreferrer">BEM</a> 这样的方式来进行 <a href="https://www.jianshu.com/p/900e26060c09" target="_blank" rel="noreferrer">CSS className 的组织与命名</a><sup>[5]</sup>，避免过多的嵌套层级。这里有<a href="https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/" target="_blank" rel="noreferrer">一篇文章</a><sup>[6]</sup>介绍了选择器的匹配成本。</p><p>不过千万要注意了，代码的可维护性还是最重要的，不要为了过分简化选择器而放弃了代码语义和可维护性。我们仅仅是要尽量避免像上面那样的一些过分复杂的、或者不必要的繁琐的选择器。</p><h3 id="_4-2-避免使用昂贵的属性" tabindex="-1">4.2. 避免使用昂贵的属性 <a class="header-anchor" href="#_4-2-避免使用昂贵的属性" aria-hidden="true">#</a></h3><p>有一些 CSS 的属性在渲染上是有比较高的成本的，渲染速度相较而言也会慢些。在不同的浏览器上，具体的表现不太一致，但总体来说，下面一些属性是比较昂贵的：</p><ul><li>border-radius</li><li>box-shadow</li><li>opacity</li><li>transform</li><li>filter</li><li>position: fixed</li></ul><h3 id="_4-3-使用先进的布局方式" tabindex="-1">4.3. 使用先进的布局方式 <a class="header-anchor" href="#_4-3-使用先进的布局方式" aria-hidden="true">#</a></h3><p>对于页面布局，我们有很多方法，例如 <a href="https://juejin.im/post/5b3b56a1e51d4519646204bb" target="_blank" rel="noreferrer">float、positioning、flex、grid</a><sup>[7]</sup> 等。float 本身设计出来并非是为了处理复杂的布局，但是通过大家的发掘和研究，已经可以通过它来实现很多种布局形式了。基于兼容性考虑，float 也成为了流行的布局方式。</p><p>不过，<a href="https://www.zhihu.com/question/271492607" target="_blank" rel="noreferrer">一些资料</a><sup>[8]</sup>也指出，使用新版的 flex 进行布局比我们用的一些“老式”方法性能更好（例如基于 float 的浮动布局）。 flex 在移动端具有不错的兼容性，很多移动场景下已经大规模使用 flex 进行页面布局。同时，虽然 flex 有<a href="https://caniuse.com/#search=flex" target="_blank" rel="noreferrer">兼容性要求</a>，但由于很多 PC 站都不再兼容低版本 IE，因此也可以开始尝试使用它。</p><p>如果你之前对 flex 了解不多，这里有一个不错的<a href="https://scrimba.com/g/gflexbox" target="_blank" rel="noreferrer">教程</a>可以帮你快速入门。</p><h2 id="_5-利用缓存" tabindex="-1">5. 利用缓存 <a class="header-anchor" href="#_5-利用缓存" aria-hidden="true">#</a></h2><p>与其他静态资源类似，我们仍然可以使用<a href="./../cache.html">各类缓存策略</a>来加速资源的加载。</p><p>此外，如果使用 webpack 作为构建工具，我们一般会使用 css-loader 和 style-loader，这样可以直接在 JavaScript 代码中 import 样式文件。不过这样带来的一个问题就是样式代码其实是耦合在 JavaScript 代码中的，通过运行时添加 <code>style</code> 标签注入页面。</p><p>一个更好的做法是在生产环境中将样式信息单独抽离成 CSS 文件，这样也可以更好地利用缓存。在 webpack v4.x 之前的版本中，我们习惯于用 <a href="https://github.com/webpack-contrib/extract-text-webpack-plugin" target="_blank" rel="noreferrer">ExtractTextWebpackPlugin</a> 插件。不过在 v4.x 之后，对于 CSS 的抽取，推荐使用 <a href="https://webpack.js.org/plugins/mini-css-extract-plugin/" target="_blank" rel="noreferrer">MiniCssExtractPlugin</a> 插件。它可以将样式信息单独抽离出 CSS 文件来。基础的使用方式如下：</p><div class="language-JavaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// webpack.config.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MiniCssExtractPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mini-css-extract-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MiniCssExtractPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[contenthash:8].css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">chunkFilename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[contenthash:8].css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">css</span><span style="color:#89DDFF;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">            MiniCssExtractPlugin</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">loader</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">css-loader</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        ]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><hr><p>相较于 JavaScript，用户对 CSS 的可控性可能会稍弱一些，基础的优化点也许没有那么多。但随着 CSS 特性（例如 <a href="https://codersblock.com/blog/say-hello-to-houdini-and-the-css-paint-api/" target="_blank" rel="noreferrer">Houdini/CSS Paint API</a>）的不断发展，相信也会有更多我们需要关注的优化点。</p><p>结束了 CSS 部分，下面会介绍图片资源相关的性能优化。</p><hr><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><ol><li><a href="https://uxdesign.cc/what-you-should-know-about-skeleton-screens-a820c45a571a" target="_blank" rel="noreferrer">Everything you need to know about skeleton screens</a></li><li><a href="https://css-tricks.com/building-skeleton-screens-css-custom-properties/" target="_blank" rel="noreferrer">Building Skeleton Screens with CSS Custom Properties</a></li><li><a href="https://zhuanlan.zhihu.com/p/34702561" target="_blank" rel="noreferrer">自动化生成 H5 骨架页面</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Style_Computation" target="_blank" rel="noreferrer">浏览器的工作原理：新式网络浏览器幕后揭秘</a></li><li><a href="https://www.jianshu.com/p/900e26060c09" target="_blank" rel="noreferrer">使用 BEM-constructor 构建 CSS</a></li><li><a href="https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/" target="_blank" rel="noreferrer">Optimizing CSS: ID Selectors and Other Myths</a></li><li><a href="https://juejin.im/post/5b3b56a1e51d4519646204bb" target="_blank" rel="noreferrer">一篇全面的CSS布局学习指南(译)</a></li><li><a href="https://www.zhihu.com/question/271492607" target="_blank" rel="noreferrer">flex布局对性能的影响主要体现在哪方面？</a></li><li><a href="https://csswizardry.com/2018/11/css-and-network-performance/" target="_blank" rel="noreferrer">CSS and Network Performance</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css" target="_blank" rel="noreferrer">Render Blocking CSS</a></li><li><a href="https://blog.nextzy.me/how-to-write-css-for-a-great-performance-web-application-edf75bb8a8cc" target="_blank" rel="noreferrer">How to write CSS for a great performance web application</a></li><li><a href="https://www.sitepoint.com/optimizing-css-performance/" target="_blank" rel="noreferrer">20 Tips for Optimizing CSS Performance</a></li></ol>`,82),c=[t];function i(D,F,y,C,d,u){return n(),a("div",null,c)}const A=s(r,[["render",i]]);export{b as __pageData,A as default};
