import{_ as s,c as a,o as n,a as l}from"./app.89d965e1.js";const D=JSON.parse('{"title":"MySQL 基础架构你不知道的那些事！","description":"","frontmatter":{},"headers":[{"level":2,"title":"提出问题：","slug":"提出问题","link":"#提出问题","children":[]},{"level":2,"title":"讲解","slug":"讲解","link":"#讲解","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"front-end/database/mysql.md"}'),p={name:"front-end/database/mysql.md"},e=l(`<h1 id="mysql-基础架构你不知道的那些事" tabindex="-1">MySQL 基础架构你不知道的那些事！ <a class="header-anchor" href="#mysql-基础架构你不知道的那些事" aria-hidden="true">#</a></h1><h2 id="提出问题" tabindex="-1">提出问题： <a class="header-anchor" href="#提出问题" aria-hidden="true">#</a></h2><blockquote><p>一条 sql 查询语句在 mysql 数据库中具体是怎么执行的？</p></blockquote><p>来具体讲解 mysql 的基础架构。</p><h2 id="讲解" tabindex="-1">讲解 <a class="header-anchor" href="#讲解" aria-hidden="true">#</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mysql&gt; select * from Student where ID=1;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面一条简单的查询语句很简单，但我想好多开发者并不知道在 MYSQL 内部的执行过程。</p><h4 id="mysql-基本架构示意图" tabindex="-1">Mysql 基本架构示意图 <a class="header-anchor" href="#mysql-基本架构示意图" aria-hidden="true">#</a></h4><p><img src="https://imgvip.meishubao.com/msb_global/img/mysql_01.png" alt="mysql_01"></p><p>从图中可以看出 Mysql 可以大体分为 Server 层和存储引擎层两部分。</p><p>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，这些涵盖了 MySQL 的大多数核心服务和所有的内置函数（如日期、时间、数学和加密函数等），跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>存储引擎层负责数据的存储和提取，提供数据的读写接口。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。目前开发中最常用的存储引擎是 InnoDB，它从 MySQL5.5.5 版本开始成为默认存储引擎，不过开发者也可以通过指定存储引擎的类型来选择别的引擎。</p><p>即使存储引擎不同，但是也会共用一个 Server 层，接下来对 Server 层中的执行流程，依次对其作用进行讲解。</p><h4 id="连接器" tabindex="-1">连接器 <a class="header-anchor" href="#连接器" aria-hidden="true">#</a></h4><p>运行查询语句开始查询的前提是第一步先连接数据库，这时候等待你的就是连接器。连接器负责和客户端建立连接、获取权限、维持和管理连接。</p><p>常规的开发模式，客户端与服务器需要建立连接。二者在完成经典的 TCP 握手后，Server 层连接器就要开始认证你的身份，这个时候是服务器端代码使用的用户名和密码。</p><p>连接器一些内容说明：</p><ul><li>连接时：如果用户名或密码不对，服务器端会收到“Access denied for user”的错误，客户端报错无法使用。</li><li>连接时：如果用户名密码认证通过，连接器会到权限表中查出你拥有的权限。之后，通过本次连接查询到的权限进行各种逻辑判断，并且都将依赖于此次连接读到的权限(这里要注意也就是说一个数据库用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在的连接的权限。修改权限后，只有再建立新的连接才可以使用新设置的权限)</li><li>连接完成后：如果一直没有对数据库有操作，则本次连接将处于空闲。show processlist 可以查看所有的连接，其中 Command 列表示的是连接状态中 Command 列为“Sleep”则表示是一个空闲连接</li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mysql</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">show processlist</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>连接断开相关：客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</li></ul><blockquote><p>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p></blockquote><ul><li>建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。</li></ul><p>较好的连接方式长连接产生的问题以及解决办法：</p><p>全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。怎么解决这个问题呢？你可以考虑以下两种方案。</p><ol><li><p>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</p></li><li><p>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状</p></li></ol><h4 id="查询缓存" tabindex="-1">查询缓存 <a class="header-anchor" href="#查询缓存" aria-hidden="true">#</a></h4><p>第一步连接建立完成后，就可以执行查询语句了。第二步:查询缓存。</p><p>Mysql 确定了查询语句，会先到查询缓存中，看之前是否执行过这条查询语句。之前如果执行过这条查询语句，查询结果可能会以 key-value 的方式直接缓存在内存中。key 是查询的语句，value 是查询到的值，这样的话查询缓存会直接把 value 值返回给客户端。查询语句如果步子查询缓存中，会正常往下执行，获取到新的查询结果后会被存入到查询缓存中。</p><p>说明：</p><ul><li><p>大多数情况下并不建议使用查询缓存。查询缓存往往弊大于利。</p><p>查询缓存的失效非常频繁，只要有对某个表的更新，该表的所有查询缓存都会被清空。所以很可能你费劲把结果存起来，还没有使用，就被一个更新全部清空了，尤其是对于更新压力大的数据库来说，查询缓存的命中率很低。但是也不是不能使用，假如一张静态表（系统配置表），很长时间更新一次，这种情况就比较适合使用查询缓存。</p></li><li><p>如何设置 Mysql 不使用查询缓存</p><p>将 Mysql 参数 query_cache_type 设置成 DEMAND，这样默认的 SQL 语句都不使用查询缓存</p></li><li><p>如何对某一条查询语句指定使用查询缓存</p><p>确定使用查询缓存的语句，可以用 SQL_CACHE 显示指定</p></li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mysql</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> SQL_CACHE </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> Student </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> ID</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意:Mysql 8.0 版本直接将查询缓存对整块功能删除掉了，8.0 之后将不再出现查询缓存。</p></blockquote><h4 id="分析器" tabindex="-1">分析器 <a class="header-anchor" href="#分析器" aria-hidden="true">#</a></h4><p>如果在查询缓存中未找到缓存数据，就会开始真正的执行查询语句。Mysql 需要直到这条查询语句要做什么？因此需要对 SQL 语句做解析。</p><p>解析流程：</p><ul><li><p>词法分析</p><p>分析器首先会做词法分析，查询语句中包括了多个字符串和空格组成，Mysql 需要识别出里面的字符串分别代表什么。</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mysql</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> Student </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> ID</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>分析这条查询语句，&quot;select&quot;关键字可以识别出是一个查询语句。 字符串&quot;Student&quot;识别出是表名&quot;Student&quot;，把字符串&quot;ID&quot;识别成列&quot;ID&quot;。</p></li><li><p>语法分析</p><p>词法分析后，语句法分析会根据语法规则，判断输入的 SQL 语句是否满足 MySql 语法。如果语法不对，会收到“You have an error in your SQL syntax”的错误提醒。例如</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mysql</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> elect </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> Student </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> ID</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ERROR </span><span style="color:#F78C6C;">1064</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">42000</span><span style="color:#A6ACCD;">) You have an error </span><span style="color:#F78C6C;">in</span><span style="color:#A6ACCD;"> your </span><span style="color:#F78C6C;">SQL</span><span style="color:#A6ACCD;"> syntax; </span><span style="color:#C792EA;">check</span><span style="color:#A6ACCD;"> the </span><span style="color:#F78C6C;">manual</span><span style="color:#A6ACCD;"> that corresponds </span><span style="color:#F78C6C;">to</span><span style="color:#A6ACCD;"> your MySQL </span><span style="color:#F78C6C;">server</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">version</span><span style="color:#A6ACCD;"> for the </span><span style="color:#82AAFF;">right</span><span style="color:#A6ACCD;"> syntax </span><span style="color:#F78C6C;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">use</span><span style="color:#A6ACCD;"> near </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">elect * from t where ID=1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">line</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>技巧:一般语法错误看错误提示的时候，要关注的是紧接“use near”的内容</p></li></ul><h4 id="优化器" tabindex="-1">优化器 <a class="header-anchor" href="#优化器" aria-hidden="true">#</a></h4><p>分析器执行之后，到达了优化器。</p><p>优化器会做那些优化处理：</p><ul><li><p>当在表中有多个索引的时候，优化器会决定这条查询语句使用哪个索引</p></li><li><p>一个查询语句有多表关联（join）的时候，决定各个表的连接顺序。</p><p>例子如下:</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mysql</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> t1 </span><span style="color:#F78C6C;">join</span><span style="color:#A6ACCD;"> t2 </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;">(ID) </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> t1.c</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">and</span><span style="color:#A6ACCD;"> t2.d</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>该例子既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20.</li><li>也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。</li></ol><p>两种关联查询方案结果肯定是一样的，但是执行效率会有不同，优化器就是决定选择使用哪一个方案。</p></li></ul><h4 id="执行器" tabindex="-1">执行器 <a class="header-anchor" href="#执行器" aria-hidden="true">#</a></h4><p>MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做（执行方案是什么？），于是就进入了执行器阶段，开始执行语句。</p><p>开始执行的时候，要先判断一下你对这个表 Student <strong>有没有执行查询的权限</strong>，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mysql</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> Student </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> ID</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ERROR </span><span style="color:#F78C6C;">1142</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">42000</span><span style="color:#A6ACCD;">): </span><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> command denied </span><span style="color:#F78C6C;">to</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">@</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> for </span><span style="color:#F78C6C;">table</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Student</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><h4 id="存储引擎" tabindex="-1">存储引擎 <a class="header-anchor" href="#存储引擎" aria-hidden="true">#</a></h4><p>来到存储引擎，执行存储引擎提供的数据读写接口。</p><p>这条查询语句，<strong>执行器</strong>（注意这里读写数据的还是存储引擎）读写数据的流程要分两种情况考虑：</p><ul><li><p>表 Student 中，ID 字段没有索引，执行流程如下：</p><p>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 1，如果不是则跳过，如果是则将这行存在结果集中；</p><p>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</p><p>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</p><p>至此，这个语句就执行完成了。</p></li></ul><ul><li><p>表 Student 中，ID 字段有索引，那么执行器的执行流程是这样的：</p><p>有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。</p></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>到此，一条查询语句在 mysql 架构中执行基本流程进行了一个大概的讲解。在这个流程中，会有很多细节和可深挖学习的地方，例如关联（join）、索引、日志系统等，接下来会继续学习并记录一些 MySql 的东西。</p>`,52),o=[e];function r(t,c,C,i,y,d){return n(),a("div",null,o)}const u=s(p,[["render",r]]);export{D as __pageData,u as default};
