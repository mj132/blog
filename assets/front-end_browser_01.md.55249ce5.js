import{_ as s,c as a,o as n,a as l}from"./app.987cfbbf.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是DOM","slug":"什么是dom","link":"#什么是dom","children":[]},{"level":2,"title":"渲染树最终形成经历了哪些","slug":"渲染树最终形成经历了哪些","link":"#渲染树最终形成经历了哪些","children":[]},{"level":2,"title":"HTML解析器","slug":"html解析器","link":"#html解析器","children":[]},{"level":2,"title":"CSS解析器","slug":"css解析器","link":"#css解析器","children":[]},{"level":2,"title":"javascript对DOM树与CSSOM树创建的影响","slug":"javascript对dom树与cssom树创建的影响","link":"#javascript对dom树与cssom树创建的影响","children":[]},{"level":2,"title":"构建渲染树","slug":"构建渲染树","link":"#构建渲染树","children":[]},{"level":2,"title":"在渲染树形成过程可以做哪些优化","slug":"在渲染树形成过程可以做哪些优化","link":"#在渲染树形成过程可以做哪些优化","children":[]}],"relativePath":"front-end/browser/01.md"}'),p={name:"front-end/browser/01.md"},e=l(`<h2 id="什么是dom" tabindex="-1">什么是DOM <a class="header-anchor" href="#什么是dom" aria-hidden="true">#</a></h2><p>DOM是Document Object Model（文档对象模型）的缩写</p><blockquote><p>W3C 文档对象模型 （DOM） 是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。-这是W3Cschool给的概念</p></blockquote><p>看了上面的概念好像太“官方”，解释就是 DOM 是对 HTML 文档结构化的表述，后端服务器返回给浏览器渲染引擎的 HTML 文件字节流是无法直接被浏览器渲染引擎理解的，要转化为渲染器引擎可以理解的内部结构，这个结构就是 DOM。 W3C 那个概念我好像还没有把它全部翻译完，“<strong>允许程序和脚本动态地访问和更新文档的内容、结构和样式”</strong>。这里其实就是DOM的作用了</p><ol><li>页面展示: DOM 是生成页面的基础数据结构</li><li>JavaScript 脚本操作: DOM 提供给 JavaScript 脚本操作的接口，JavaScript 可以通过这些接口对 DOM 结构进行访问，从而改变文档的结构和样式</li><li>安全: DOM 是一道安全防线，DOM 解析阶段会过滤掉一些不安全的 DOM 内容。</li></ol><blockquote><p>本文主要以 Webkit 渲染引擎来讲解，Safari 和 Chrome 都使用 Webkit。Webkit 是一款开源渲染引擎，它本来是为 linux 平台研发的，后来由 Apple 移植到 Mac 及 Windows 上。</p></blockquote><h2 id="渲染树最终形成经历了哪些" tabindex="-1">渲染树最终形成经历了哪些 <a class="header-anchor" href="#渲染树最终形成经历了哪些" aria-hidden="true">#</a></h2><p>先看一张整体的流程图</p><p><img src="https://imgvip.meishubao.com/msb_global/img/render_01.jpg" alt=""></p><p>下面围绕这张图和不同代表性对例子进行讲解。</p><h2 id="html解析器" tabindex="-1">HTML解析器 <a class="header-anchor" href="#html解析器" aria-hidden="true">#</a></h2><p>从后端返回给浏览器渲染引擎 HTML 文件字节流， 第一步要经过的就是渲染引擎中的 HTML 解析器。它实现了将 HTML 字节流转换为 DOM树 结构。 HTML 文件字节流返回的过程中 HTML 解析器就一直在解析，边加载边解析哦(这里注意下，有些文章写的有问题)。</p><p>例子1:最简单的不带 CSS 和 JavaScript 的 HTML 代码讲解 HTML 解析器</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">mj</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">大前端</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>根据这段代码具体分析 HTML 解析器做了哪些事</p><h4 id="阶段一-字节流转换为字符并w3c标准令牌化" tabindex="-1">阶段一 字节流转换为字符并W3C标准令牌化 <a class="header-anchor" href="#阶段一-字节流转换为字符并w3c标准令牌化" aria-hidden="true">#</a></h4><p>读取 HTML 的原始字节流，并根据文件的指定编码（例如 UTF-8）将它们转换成各个字符。 并将字符串转换成 W3C HTML5 标准规定的各种令牌，例如，<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>，以及其他尖括号内的字符串。每个令牌都具有特殊含义和一组规则。</p><p>一堆字节流 bytes</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">3C 62 6F ... </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转成正常的html文件</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    mj</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        大前端</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">P</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="阶段二-通过分词器将字节流转化为-token" tabindex="-1">阶段二 通过分词器将字节流转化为 Token <a class="header-anchor" href="#阶段二-通过分词器将字节流转化为-token" aria-hidden="true">#</a></h4><p>分词器将字节流转换为一个一个的 Token，Token 分为 Tag Token和文本 Token，上面这段代码最后分词器转化后的结果是:</p><p><img src="https://imgvip.meishubao.com/msb_global/img/render_02.png" alt=""></p><h4 id="阶段三和阶段四-将-token-解析为-dom-节点-并将-dom-节点添加到-dom-树中" tabindex="-1">阶段三和阶段四 将 Token 解析为 DOM 节点，并将 DOM 节点添加到 DOM 树中 <a class="header-anchor" href="#阶段三和阶段四-将-token-解析为-dom-节点-并将-dom-节点添加到-dom-树中" aria-hidden="true">#</a></h4><p>HTML 解析器维护了一个 Token 栈结构（<strong>数据结构</strong>真是个好东西），这个栈结构的目的就是用来计算节点间的父子关系，在上一个阶段生成的 Token 会被顺序压到这个栈中，以下是具体规则：</p><ul><li>HTML 解析器开始工作时，会默认创建了一个根为 document 的空 DOM 结构，同时会将一个 StartTag document 的 Token 压入栈底。</li></ul><p><img src="https://imgvip.meishubao.com/msb_global/img/render_03.jpg" alt=""></p><ul><li>如果压入到栈中的 StartTagToken，HTML 解析器会为该 Token 创建一个 DOM节点，然后将这个 Dom节点加入到 DOM树中，它的<code>父节点</code>就是栈中相邻的那个元素生成的 DOM节点</li></ul><p><img src="https://imgvip.meishubao.com/msb_global/img/render_04.jpg" alt=""></p><ul><li>如果分词器解析出来的是文本 Token，那么会生成一个文本节点，然后把这个文本 Dom 节点加入到 DOM 树中（注:文本Token不需入栈）,它的<code>父节点</code>就是当前栈顶 Token 所对应的 DOM 节点。</li></ul><p><img src="https://imgvip.meishubao.com/msb_global/img/render_05.jpg" alt=""></p><ul><li><p>如果分词器解析出来的是 EndTag 标签，比如例子中的 EndTag div，HTML 解析器会查看 Token栈顶的元素是否是 StartTag div，如果是，就将 StartTag div从栈中弹出，边上该 div 元素解析完成。</p></li><li><p>最后按照上面的规则，分词器一路解析下来，就形成了这个简单的 DOM 树。</p></li></ul><p><img src="https://imgvip.meishubao.com/msb_global/img/render_07.jpg" alt=""></p><p>此时应该搞懂了核心图中 HTML 解析器的部分，和 DOM 树的基本绘制流程，但是现实很残酷，哪里有这么简单的前端代码，还有有 JavaScript 和 CSS 呢！继续往下看</p><h2 id="css解析器" tabindex="-1">CSS解析器 <a class="header-anchor" href="#css解析器" aria-hidden="true">#</a></h2><p>CSS 解析器最终的目的也是构建树不过它构建的树是 CSSOM 树 树的构建流程和 DOM 树的构建流程基本相同</p><p><img src="https://imgvip.meishubao.com/msb_global/img/render_08.png" alt=""></p><p>还是那张图，具体我就不一一讲解一遍了。直接用这个简单例子</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16px</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">font-weight</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> bold </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>看下最后构造的 CSSOM 树</p><p><img src="https://imgvip.meishubao.com/msb_global/img/render_09.png" alt=""></p><p>CSSOM 为何具有树结构？为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式），然后通过应用更具体的规则（即规则“向下级联”）以递归方式优化计算的样式。</p><p>以上面的 CSSOM 树为例进行更具体的阐述。span 标记内包含的任何置于 body 元素内的文本都将具有 16 像素字号，并且颜色为红色 — font-size 指令从 body 向下级联至 span。不过，如果某个 span 标记是某个段落 (p) 标记的子项，则其内容将不会显示。</p><blockquote><p>注意点:</p><ol><li>CSS解析可以与DOM解析同进行</li><li>如果只有 CSS 和 HTML 的页面，CSS 不会影响 DOM 树的创建，但是如果页面中还有 JavaScript，结论就不一样了，请继续往下看。</li></ol></blockquote><h2 id="javascript对dom树与cssom树创建的影响" tabindex="-1">javascript对DOM树与CSSOM树创建的影响 <a class="header-anchor" href="#javascript对dom树与cssom树创建的影响" aria-hidden="true">#</a></h2><p>上面两个例子中都还没有javascript的出现，接下来说下JavaScript 对 DOM 树和 CSSOM 树构建的影响。</p><ul><li><p>情况1：当前页面中只有 Html 和 JavaScript，而且 JavaScript 非外部引入</p><p>DOM 树构建时当遇到JavaScript脚本，就要暂停 DOM 解析，先去执行Javascript，因为在JavaScript可能会操作当前已经生成的DOM节点。</p><p>有一点需要注意:javascript是可能操作<strong>当前已经生成的DOM节点</strong>，如果是后面还未生成的DOM节点是不生效的，比如这段代码:</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">111</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">         &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> div1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementsByTagName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">             div1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mj</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> div2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementsByTagName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">             div2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">大前端</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">222</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>显示结果为两行：</p><p>第一行结果是mj</p><p>第二行结果是222，会报错</p><p>因为在执行第三行和第四行 script 脚本的时候，DOM树中还没有生成第二个 div对应的dom节点。</p></li><li><p>情况2：当页面中同时有Html JavaScript CSS ，而且都非外部引入</p><p>DOM 树构建时当遇到 JavaScript 脚本，就要暂停 DOM 解析，先去执行 JavaScript，同时 JavaScript 还要判断 CSSOM 是否解析完成，因为在 JavaScript 可能会操作 CSSOM 节点，CSSOM 节点确认解析完成，执行 JavaScript 再次回到 DOM 树创建。（<strong>所以这里也可以所CSS解析间接影响DOM树创建</strong>）</p></li><li><p>情况3：当页面中同时有Html，JavaScript， CSS ，而且外部引入</p><p>Webkit渲染引擎有一个优化，当渲染进程接收 HTML 文件字节流时，会先开启一个预解析线程，如果遇到 JavaScript 文件或者 CSS 文件，那么预解析线程会提前下载这些数据。DOM树在创建过程中如果遇到JavaScript文件，接下来就和情况2类型一样了。</p></li></ul><p>影响关系图: 画了一张影响关系图希望大家更好的记忆:</p><p><img src="https://imgvip.meishubao.com/msb_global/img/render_10.png" alt=""></p><h2 id="构建渲染树" tabindex="-1">构建渲染树 <a class="header-anchor" href="#构建渲染树" aria-hidden="true">#</a></h2><p>通过 DOM 树和 CSSOM 树，浏览器就可以通过二者构建渲染树了。浏览器会先从 DOM 树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。具体的规则有以下几点需要注意：</p><ul><li><p>Render Tree和DOM Tree不完全对应。</p></li><li><p>请注意 visibility: hidden 与 display: none 是不一样的。前者隐藏元素，但元素仍占据着布局空间（即将其渲染成一个空框），而后者 (display: none) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分</p></li></ul><p>看一下前问中提到的 DOM 树和 CSSOM 树最终合成的渲染树结果是:</p><p><img src="https://imgvip.meishubao.com/msb_global/img/render_11.png" alt=""></p><h2 id="在渲染树形成过程可以做哪些优化" tabindex="-1">在渲染树形成过程可以做哪些优化 <a class="header-anchor" href="#在渲染树形成过程可以做哪些优化" aria-hidden="true">#</a></h2><p>看完了渲染树的形成，在开发过程中我们能做哪些优化？(注意这里的优化只是针对渲染树形成部分，其他的优化会在系列文章之后继续讲)</p><ol><li>在引入顺序上，CSS 资源先于 JavaScript 资源。样式文件应当在 head 标签中，而脚本文件在 body 结束前，这样可以防止阻塞的方式。</li><li>尽量减少在 JavaScript 中进行DOM操作。</li><li>简化并优化CSS选择器，尽量将嵌套层减少到最小。</li><li>修改元素样式时，更改其class属性是性能最高的方法。</li></ol>`,58),o=[e];function t(r,c,i,D,d,y){return n(),a("div",null,o)}const C=s(p,[["render",t]]);export{m as __pageData,C as default};
